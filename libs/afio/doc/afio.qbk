[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[library Boost.AFIO
    [quickbook 1.7]
    [version 1.2]
    [id afio]
    [category afio]
    [authors [Douglas, Niall], [Kirth, Paul]]
    [copyright 2013-2014 Niall Douglas and Paul Kirth]
    [purpose A batch, chainable, asynchronous closure execution engine integrated into Boost.ASIO, specialised as a portable asynchronous file i/o implementation library]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
    [source-mode c++]
]

[def __boost__ Boost]
[def __boost_afio__ Boost.AFIO]
[def __triplegit__ TripleGit]
[def __dash__ \u2014]
[def __tick__ [role aligncenter [role green \u2714]]]
[def __itick__ [role aligncenter [role red \u2714]]]
[def __cross__ [role aligncenter [role red \u2718]]]
[def __icross__ [role aligncenter [role green \u2718]]]
[def __boost_asio__ [@http://www.boost.org/libs/asio/ Boost.ASIO]]
[def __boost_thread__ [@http://www.boost.org/libs/thread/ Boost.Thread]]
[def __boost_filesystem__ [@http://www.boost.org/libs/filesystem/ Boost.Filesystem]]
[def __boost_iostreams__ [@http://www.boost.org/libs/iostreams/ Boost.Iostreams]]
[def __WG21_N3562__ [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3731.pdf WG21 N3731 (Executors and schedulers v2)]]
[def __WG21_N3634__ [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3721.pdf WG21 N3721 (Improvements to std::future<T> and Related APIs)]]
[def ___WG21_N3634__ WG21 N3721 (Improvements to std::future<T> and Related APIs)]

[/ Commonly used links]
[def __afio_barrier__ [link afio.reference.classes.async_file_io_dispatcher_base.barrier `async_file_io_dispatcher_base::barrier()`]]
[def __afio_call__ [link afio.reference.classes.async_file_io_dispatcher_base.call_2_batch_bound_functions `async_file_io_dispatcher_base::call()`]]
[def __afio_completion__ [link afio.reference.classes.async_file_io_dispatcher_base.completion_2_batch_bound_functions `async_file_io_dispatcher_base::completion()`]]
[def __afio_dispatcher__ [link afio.reference.classes.async_file_io_dispatcher_base `async_file_io_dispatcher_base`]]
[def __afio_enumerate__ [link afio.reference.classes.async_file_io_dispatcher_base.enumerate_1_batch `async_file_io_dispatcher_base::enumerate()`]]
[def __afio_truncate__ [link afio.reference.classes.async_file_io_dispatcher_base.truncate_2_batch `async_file_io_dispatcher_base::truncate()`]]
[def __afio_op__ [link afio.reference.structs.async_io_op `struct async_io_op`]]
[def __afio_handle__ [link afio.reference.classes.async_io_handle `class async_io_handle`]]
[def __afio_when_all__ [link afio.reference.functions.when_all_ops `when_all()`]]

[import ../example/adopt_example.cpp]
[import ../example/barrier_example.cpp]
[import ../example/call_example.cpp]
[import ../example/closure_execution_afio_io_example.cpp]
[import ../example/closure_execution_traditional_io_example.cpp]
[import ../example/completion_example1.cpp]
[import ../example/completion_example2.cpp]
[import ../example/current_exception_hack.cpp]
[import ../example/enumerate_example.cpp]
[import ../example/filecopy_example.cpp]
[import ../example/filedir_example.cpp]
[import ../example/filter_example.cpp]
[import ../example/find_in_files_afio.cpp]
[import ../example/find_in_files_iostreams.cpp]
[import ../example/readallof_example.cpp]
[import ../example/readwrite_example.cpp]
[import ../example/readwrite_example_traditional.cpp]

[section:introduction Introduction]
__boost_afio__ is a linear scalable, batch, chainable, asynchronous closure execution engine
with an almost wait free implementation[footnote It is wait free if your CPU supports memory
transactions, apart from when the memory allocator asks the kernel for more memory.] extending __boost_asio__
and __boost_thread__ specialised as a portable asynchronous file i/o implementation
library. Implementation of this first version has been kept as simple as possible (~ 1000 active
LOC) at the cost of some performance, though with a good modern compiler [link
afio.FAQ.closure_performance you can expect 50-70% of the
throughput of using raw Boost.ASIO] at a latency of [link
afio.FAQ.closure_latency about 10,000 CPU cycles to get notified
of the completion of an operation]. This library was brought to __boost__ as part of Google
Summer of Code 2013.

Note that __boost_afio__ was originally written purely in C++11 and backported later to older compilers.
It requires, as an absolute minimum, a compiler with rvalue reference support. Some popular
compilers known to be minimally sufficient thanks to [@https://ci.nedprod.com/ our Jenkins CI bot] include:

* Microsoft Visual Studio 2010, released in 2010.
* GNU Compiler Collection v4.6, released in 2011, but may work with as early as GCC v4.3.
* clang v3.2, released in 2012. clang v3.1 is known to produce segfaulting binaries.

The Jenkins CI bot runs a full set of unit tests for all supported compilers on all supported
platforms for every single commit to master branch and every single pull request. Additionally,
the Travis CI bot runs a full set of code coverage for the unit tests, plus a pass of the
clang 3.4 Thread Sanitizer over all the unit tests, also for every single commit and pull
request. As of AFIO v1.2, it is rare to see anything except all green on the CI dashboard
(apart from VS2010, on which changes to AFIO easily trigger internal compiler errors).
[link unit_test_dashboard You can view the build and unit test CI dashboard for all compilers and platforms here].

Note that just because a compiler will compile the code does not mean performance will be good:
in particular, your compiler needs to be able to choose move construction where a copy
constructor is also available (known as rvalue references v2.1) and auto-generate implicit
move constructors when all member data types have move constructors (known as rvalue references
v3.0). You may find the list of C++11 features in popular compilers at
[@http://wiki.apache.org/stdcxx/C++0xCompilerSupport] useful. Similarly, just because a compiler
will compile the code does not mean that programming using that compiler and __boost_afio__
isn't a waste of your time. In particular, you should [*avoid VS2010 and Mingw32 (not Mingw-w64
which is fine) if at all possible], but if you can't, [link afio.advanced_topics.vs2010_notes we have written a guide especially for VS2010 and Mingw32]. Try to use as new a compiler as possible with AFIO as
the quality of code generated significantly improves with each major release. As an example, AFIO
compiled with a rvalue reference v3 capable compiler is up to 60-100% faster. [link 
afio.FAQ.closure_performance You can see some raw empirical benchmarks here].

[important Note that Boost.AFIO has not passed Boost peer review, and therefore is not a part of the Boost C++ libraries]

As a very quick example of minimal usage:

[call_example]

[endsect] [/introduction]

[include design_rationale.qbk]
[include compiling.qbk]
[include quickstart.qbk]
[include reference.qbk]
[include advanced_topics.qbk]
[include release_notes.qbk]
[include acknowledgments.qbk]

