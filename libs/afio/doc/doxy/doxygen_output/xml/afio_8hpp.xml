<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="afio_8hpp" kind="file">
    <compoundname>afio.hpp</compoundname>
    <includes local="yes">config.hpp</includes>
    <includes local="yes">bindlib/include/import.h</includes>
    <includes local="no">BOOST_BINDLIB_INCLUDE_STL11(bindlib, std, atomic)</includes>
    <includes local="no">BOOST_BINDLIB_INCLUDE_STL11(bindlib, std, chrono)</includes>
    <includes local="no">BOOST_BINDLIB_INCLUDE_STL11(bindlib, std, condition_variable)</includes>
    <includes local="no">BOOST_BINDLIB_INCLUDE_STL1z(bindlib, boost, filesystem)</includes>
    <includes local="no">BOOST_BINDLIB_INCLUDE_STL11(bindlib, std, future)</includes>
    <includes local="no">BOOST_BINDLIB_INCLUDE_STL11(bindlib, std, mutex)</includes>
    <includes local="no">BOOST_BINDLIB_INCLUDE_STL1z(bindlib, boost, networking)</includes>
    <includes local="no">BOOST_BINDLIB_INCLUDE_STL11(bindlib, std, ratio)</includes>
    <includes local="no">BOOST_BINDLIB_INCLUDE_STL11(bindlib, std, thread)</includes>
    <includes local="yes">spinlock/include/boost/spinlock/concurrent_unordered_map.hpp</includes>
    <includes local="no">boost/config/auto_link.hpp</includes>
    <includes local="yes">detail/Undoer.hpp</includes>
    <includes local="no">utility</includes>
    <includes local="yes">detail/ErrorHandling.hpp</includes>
    <includes local="no">string</includes>
    <includes local="no">stdexcept</includes>
    <includes local="yes">detail/Utility.hpp</includes>
    <includes local="yes">boost/exception/diagnostic_information.hpp</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">exception</includes>
    <includes local="no">iostream</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">functional</includes>
    <incdepgraph>
      <node id="17">
        <label>boost/config/auto_link.hpp</label>
      </node>
      <node id="6">
        <label>bindlib/include/import.h</label>
      </node>
      <node id="13">
        <label>BOOST_BINDLIB_INCLUDE_STL1z(bindlib, boost, networking)</label>
      </node>
      <node id="29">
        <label>functional</label>
      </node>
      <node id="24">
        <label>boost/exception/diagnostic_information.hpp</label>
      </node>
      <node id="8">
        <label>BOOST_BINDLIB_INCLUDE_STL11(bindlib, std, chrono)</label>
      </node>
      <node id="22">
        <label>stdexcept</label>
      </node>
      <node id="16">
        <label>spinlock/include/boost/spinlock/concurrent_unordered_map.hpp</label>
      </node>
      <node id="21">
        <label>string</label>
      </node>
      <node id="9">
        <label>BOOST_BINDLIB_INCLUDE_STL11(bindlib, std, condition_variable)</label>
      </node>
      <node id="26">
        <label>exception</label>
      </node>
      <node id="18">
        <label>detail/Undoer.hpp</label>
      </node>
      <node id="23">
        <label>detail/Utility.hpp</label>
      </node>
      <node id="5">
        <label>config.hpp</label>
      </node>
      <node id="20">
        <label>detail/ErrorHandling.hpp</label>
      </node>
      <node id="10">
        <label>BOOST_BINDLIB_INCLUDE_STL1z(bindlib, boost, filesystem)</label>
      </node>
      <node id="11">
        <label>BOOST_BINDLIB_INCLUDE_STL11(bindlib, std, future)</label>
      </node>
      <node id="15">
        <label>BOOST_BINDLIB_INCLUDE_STL11(bindlib, std, thread)</label>
      </node>
      <node id="19">
        <label>utility</label>
      </node>
      <node id="14">
        <label>BOOST_BINDLIB_INCLUDE_STL11(bindlib, std, ratio)</label>
      </node>
      <node id="27">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>BOOST_BINDLIB_INCLUDE_STL11(bindlib, std, atomic)</label>
      </node>
      <node id="12">
        <label>BOOST_BINDLIB_INCLUDE_STL11(bindlib, std, mutex)</label>
      </node>
      <node id="25">
        <label>type_traits</label>
      </node>
      <node id="28">
        <label>algorithm</label>
      </node>
      <node id="4">
        <label>/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp</label>
        <link refid="afio.hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classboost_1_1afio_1_1detail_1_1enqueued__task__impl" prot="public">boost::afio::detail::enqueued_task_impl</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1enqueued__task__impl_1_1_private" prot="protected">boost::afio::detail::enqueued_task_impl::Private</innerclass>
    <innerclass refid="classboost_1_1afio_1_1enqueued__task_3_01_r_07_08_4" prot="public">boost::afio::enqueued_task&lt; R()&gt;</innerclass>
    <innerclass refid="classboost_1_1afio_1_1enqueued__task_3_01void_07_08_4" prot="public">boost::afio::enqueued_task&lt; void()&gt;</innerclass>
    <innerclass refid="classboost_1_1afio_1_1thread__source" prot="public">boost::afio::thread_source</innerclass>
    <innerclass refid="classboost_1_1afio_1_1std__thread__pool" prot="public">boost::afio::std_thread_pool</innerclass>
    <innerclass refid="classboost_1_1afio_1_1std__thread__pool_1_1worker" prot="private">boost::afio::std_thread_pool::worker</innerclass>
    <innerclass refid="structboost_1_1afio_1_1stat__t" prot="public">boost::afio::stat_t</innerclass>
    <innerclass refid="structboost_1_1afio_1_1statfs__t" prot="public">boost::afio::statfs_t</innerclass>
    <innerclass refid="structboost_1_1afio_1_1statfs__t_1_1f__flags__t" prot="public">boost::afio::statfs_t::f_flags_t</innerclass>
    <innerclass refid="classboost_1_1afio_1_1directory__entry" prot="public">boost::afio::directory_entry</innerclass>
    <innerclass refid="structboost_1_1afio_1_1directory__entry__hash" prot="public">boost::afio::directory_entry_hash</innerclass>
    <innerclass refid="classboost_1_1afio_1_1async__io__handle" prot="public">boost::afio::async_io_handle</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__io__op" prot="public">boost::afio::async_io_op</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1vs2013__variadic__overload__resolution__workaround" prot="public">boost::afio::detail::vs2013_variadic_overload_resolution_workaround</innerclass>
    <innerclass refid="classboost_1_1afio_1_1async__file__io__dispatcher__base" prot="public">boost::afio::async_file_io_dispatcher_base</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1when__all__state" prot="public">boost::afio::detail::when_all_state</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1when__any__state" prot="public">boost::afio::detail::when_any_state</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1select__when__ops__return__type" prot="public">boost::afio::detail::select_when_ops_return_type</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1select__when__ops__return__type_3_01false_01_4" prot="public">boost::afio::detail::select_when_ops_return_type&lt; false &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1enable__if__async__op" prot="public">boost::afio::detail::enable_if_async_op</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1enable__if__async__op_3_01is__all_00_01async__io__op_01_4" prot="public">boost::afio::detail::enable_if_async_op&lt; is_all, async_io_op &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__path__op__req" prot="public">boost::afio::async_path_op_req</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1to__asio__buffers__helper" prot="public">boost::afio::detail::to_asio_buffers_helper</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1to__asio__buffers__helper_3_01is__const_00_01_r_00_01_t_00_01true_00_01false_01_4" prot="public">boost::afio::detail::to_asio_buffers_helper&lt; is_const, R, T, true, false &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1container__to__asio__buffers__helper" prot="public">boost::afio::detail::container_to_asio_buffers_helper</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1container__to__asio__buffers__helper_3_01_r_00_01std_1_1basic__8d2c39514aeb002e005e9bc3cdcf8588" prot="public">boost::afio::detail::container_to_asio_buffers_helper&lt; R, std::basic_string&lt; C, T, A &gt;, _C, is_const, true &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1container__to__asio__buffers__helper_3_01_r_00_01std_1_1vector_08cceb32b20cab5c10bc02eea27ecdef" prot="public">boost::afio::detail::container_to_asio_buffers_helper&lt; R, std::vector&lt; T, A &gt;, _T, is_const, true &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1container__to__asio__buffers__helper_3_01_r_00_01std_1_1array_31d265f3bd056d3edf5412f1bb8b25367" prot="public">boost::afio::detail::container_to_asio_buffers_helper&lt; R, std::array&lt; T, N &gt;, _T, is_const, true &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1to__asio__buffers__helper_3_01is__const_00_01_r_00_01_t_00_01is__trivial_00_01true_01_4" prot="public">boost::afio::detail::to_asio_buffers_helper&lt; is_const, R, T, is_trivial, true &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1to__asio__buffers__helper_3_01is__const_00_01_r_00_01std_1_1vec015c9a1671103d5540a40db22dcf2c1f" prot="public">boost::afio::detail::to_asio_buffers_helper&lt; is_const, R, std::vector&lt; asio::mutable_buffer &gt;, false, true &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1to__asio__buffers__helper_3_01is__const_00_01_r_00_01std_1_1vecf0033e923d262694df69e5de182cb274" prot="public">boost::afio::detail::to_asio_buffers_helper&lt; is_const, R, std::vector&lt; asio::const_buffer &gt;, false, true &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1to__asio__buffers__helper_3_01is__const_00_01_r_00_01std_1_1arr71ff4d886b752dc4ea6a8a63c5132139" prot="public">boost::afio::detail::to_asio_buffers_helper&lt; is_const, R, std::array&lt; asio::mutable_buffer, N &gt;, false, true &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1to__asio__buffers__helper_3_01is__const_00_01_r_00_01std_1_1arr7698302ecba29743ef4e88d006e0ea0e" prot="public">boost::afio::detail::to_asio_buffers_helper&lt; is_const, R, std::array&lt; asio::const_buffer, N &gt;, false, true &gt;</innerclass>
    <innerclass refid="classboost_1_1afio_1_1detail_1_1async__data__op__req__impl_3_01false_01_4" prot="public">boost::afio::detail::async_data_op_req_impl&lt; false &gt;</innerclass>
    <innerclass refid="classboost_1_1afio_1_1detail_1_1async__data__op__req__impl_3_01true_01_4" prot="public">boost::afio::detail::async_data_op_req_impl&lt; true &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req" prot="public">boost::afio::async_data_op_req</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01const_01_t_01_4" prot="public">boost::afio::async_data_op_req&lt; const T &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01void_01_4" prot="public">boost::afio::async_data_op_req&lt; void &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01const_01void_01_4" prot="public">boost::afio::async_data_op_req&lt; const void &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1make__async__data__op__req" prot="public">boost::afio::detail::make_async_data_op_req</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1make__async__data__op__req_3_01_t_00_01true_01_4" prot="public">boost::afio::detail::make_async_data_op_req&lt; T, true &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__enumerate__op__req" prot="public">boost::afio::async_enumerate_op_req</innerclass>
    <innerclass refid="structboost_1_1afio_1_1detail_1_1async__file__io__dispatcher__rwconverter" prot="public">boost::afio::detail::async_file_io_dispatcher_rwconverter</innerclass>
    <innerclass refid="structstd_1_1hash_3_01boost_1_1afio_1_1directory__entry_01_4" prot="public">std::hash&lt; boost::afio::directory_entry &gt;</innerclass>
    <innernamespace refid="namespaceboost">boost</innernamespace>
    <innernamespace refid="namespaceboost_1_1afio">boost::afio</innernamespace>
    <innernamespace refid="namespaceboost_1_1afio_1_1detail">boost::afio::detail</innernamespace>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="afio_8hpp_1a7d6cb43e029a76765081fb3a2f47187d" prot="public" static="no">
        <name>BOOST_AFIO_HEADERS_ONLY</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Determines if AFIO is compiled as headers only. Defaults to 1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="35"/>
      </memberdef>
      <memberdef kind="define" id="afio_8hpp_1a183b5c98a87ff28a56ea3bfdbe141ee9" prot="public" static="no">
        <name>BOOST_AFIO_USE_BOOST_THREAD</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Determines if AFIO is bound against Boost.Thread or the C++ 11 STL thread. Defaults to 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="36"/>
      </memberdef>
      <memberdef kind="define" id="afio_8hpp_1ab5974d84a78dbcf8b072fca370f1291d" prot="public" static="no">
        <name>BOOST_AFIO_USE_BOOST_FILESYSTEM</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Determines if AFIO is bound against Boost.Filesystem or the C++ 1z Filesystem TS. Defaults to 1 unless on VS2015 which provides a full Filesystem TS implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="37"/>
      </memberdef>
      <memberdef kind="define" id="afio_8hpp_1a5b90f4adb6bc09ca319c35c3448ee67a" prot="public" static="no">
        <name>ASIO_STANDALONE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Determines if AFIO is bound against standalone ASIO or Boost.ASIO. Defaults to undefined, and therefore Boost.ASIO. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="38"/>
      </memberdef>
      <memberdef kind="define" id="afio_8hpp_1a401610ff222fc25b2f5194a628d0ca52" prot="public" static="no">
        <name>BOOST_AFIO_V1_NAMESPACE</name>
        <initializer>boost::afio</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="50" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="afio_8hpp_1a58c3ce35d210f818df9f4e3cf4c6575f" prot="public" static="no">
        <name>BOOST_AFIO_V1_NAMESPACE_BEGIN</name>
        <initializer>namespace boost { namespace afio {</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="51" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="afio_8hpp_1a2052639d8e84836a73d90c595e5dd1a6" prot="public" static="no">
        <name>BOOST_AFIO_V1_NAMESPACE_END</name>
        <initializer>} }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="52" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="afio_8hpp_1a5a75b0e1ac1a86e60b2666ed2f64d36f" prot="public" static="no">
        <name>BOOST_AFIO_HEADERS_ONLY_MEMFUNC_SPEC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="53" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="afio_8hpp_1ab4f63024aa1238f1d6a067b3d7fb23c7" prot="public" static="no">
        <name>BOOST_AFIO_HEADERS_ONLY_VIRTUAL_SPEC</name>
        <initializer>virtual</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="54" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__macros_1ga8abeb465d2ca6fa15b3c3754697e5577" prot="public" static="no">
        <name>BOOST_AFIO_VALIDATE_INPUTS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Validate inputs at the point of instantiation. </para>        </briefdescription>
        <detaileddescription>
<para>Turns on the checking of inputs for validity and throwing of exception conditions at the point of instantiation rather than waiting until those inputs are sent for dispatch. This, being very useful for debugging, defaults to 1 except when `NDEBUG` is defined i.e. final release builds. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="77" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="afio_8hpp_1a933046d7a31248aa271a978579ee8977" prot="public" static="no">
        <name>BOOST_AFIO_DECLARE_CLASS_ENUM_AS_BITFIELD</name>
        <param><defname>type</defname></param>
        <initializer>inline BOOST_CONSTEXPR type operator&amp;(type a, type b) \
{ \
    return static_cast&lt;type&gt;(static_cast&lt;size_t&gt;(a) &amp; static_cast&lt;size_t&gt;(b)); \
} \
inline BOOST_CONSTEXPR type operator|(type a, type b) \
{ \
    return static_cast&lt;type&gt;(static_cast&lt;size_t&gt;(a) | static_cast&lt;size_t&gt;(b)); \
} \
inline BOOST_CONSTEXPR type operator~(type a) \
{ \
    return static_cast&lt;type&gt;(~static_cast&lt;size_t&gt;(a)); \
} \
inline BOOST_CONSTEXPR bool operator!(type a) \
{ \
    return 0==static_cast&lt;size_t&gt;(a); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="377" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="afio_8hpp_1ac794ed8c3e9fc1a99bd54d5b993d2b6c" prot="public" static="no">
        <name>BOOST_AFIO_DIRECTORY_ENTRY_ACCESS_METHOD</name>
        <param><defname>field</defname></param>
        <initializer>fieldtype st_##field(std::shared_ptr&lt;async_io_handle&gt; dirh=std::shared_ptr&lt;async_io_handle&gt;()) { if(!(have_metadata&amp;metadata_flags::field)) { _int_fetch(metadata_flags::field, dirh); } return stat.st_##field; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="757" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="756" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides a batch asynchronous file i/o implementation based on Boost.ASIO. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp"/>
  </compounddef>
</doxygen>
