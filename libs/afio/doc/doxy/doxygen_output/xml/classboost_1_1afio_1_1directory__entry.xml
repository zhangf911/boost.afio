<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="classboost_1_1afio_1_1directory__entry" kind="class" prot="public">
    <compoundname>boost::afio::directory_entry</compoundname>
    <includes refid="afio_8hpp" local="no">afio.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classboost_1_1afio_1_1directory__entry_1a56f496ba01c9b613e83758582f2b06c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class detail::async_file_io_dispatcher_compat</definition>
        <argsstring></argsstring>
        <name>detail::async_file_io_dispatcher_compat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="693" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classboost_1_1afio_1_1directory__entry_1a7eb74be36e15618561c7df1fbdacea5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class detail::async_file_io_dispatcher_windows</definition>
        <argsstring></argsstring>
        <name>detail::async_file_io_dispatcher_windows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="694" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="694" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classboost_1_1afio_1_1directory__entry_1a06e10cc6179894e1e8bab39ccba6c476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class detail::async_file_io_dispatcher_linux</definition>
        <argsstring></argsstring>
        <name>detail::async_file_io_dispatcher_linux</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="695" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classboost_1_1afio_1_1directory__entry_1a4fb6d073a418fd80cc2b81450cc82687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class detail::async_file_io_dispatcher_qnx</definition>
        <argsstring></argsstring>
        <name>detail::async_file_io_dispatcher_qnx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="696" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="696" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classboost_1_1afio_1_1directory__entry_1a8096b2f6f12618711002bf8af831a9ed" prot="private" static="no" mutable="no">
        <type>filesystem::path</type>
        <definition>filesystem::path boost::afio::directory_entry::leafname</definition>
        <argsstring></argsstring>
        <name>leafname</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="698" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classboost_1_1afio_1_1directory__entry_1a85eddc4d783f2d917192c34b25e8e00a" prot="private" static="no" mutable="no">
        <type><ref refid="structboost_1_1afio_1_1stat__t" kindref="compound">stat_t</ref></type>
        <definition>stat_t boost::afio::directory_entry::stat</definition>
        <argsstring></argsstring>
        <name>stat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="699" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="699" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classboost_1_1afio_1_1directory__entry_1a13789aab884f193c16480a4ed2c88ec6" prot="private" static="no" mutable="no">
        <type><ref refid="group__metadata__flags_1ga228a95ca96f053e74e69e6d1ab23eccb" kindref="member">metadata_flags</ref></type>
        <definition>metadata_flags boost::afio::directory_entry::have_metadata</definition>
        <argsstring></argsstring>
        <name>have_metadata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="700" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="700" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1aa99ec8f3833788919a40325db6d7ca22" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void boost::afio::directory_entry::_int_fetch</definition>
        <argsstring>(metadata_flags wanted, std::shared_ptr&lt; async_io_handle &gt; dirh)</argsstring>
        <name>_int_fetch</name>
        <param>
          <type><ref refid="group__metadata__flags_1ga228a95ca96f053e74e69e6d1ab23eccb" kindref="member">metadata_flags</ref></type>
          <declname>wanted</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="701"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a7e5452e32095af4f18ccb1c053bdc3c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>boost::afio::directory_entry::directory_entry</definition>
        <argsstring>()</argsstring>
        <name>directory_entry</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="704" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="704" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1acb84b4c6de28b2f8bdacfe93d2ec8fa1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>boost::afio::directory_entry::directory_entry</definition>
        <argsstring>(filesystem::path _leafname, stat_t __stat, metadata_flags _have_metadata)</argsstring>
        <name>directory_entry</name>
        <param>
          <type>filesystem::path</type>
          <declname>_leafname</declname>
        </param>
        <param>
          <type><ref refid="structboost_1_1afio_1_1stat__t" kindref="compound">stat_t</ref></type>
          <declname>__stat</declname>
        </param>
        <param>
          <type><ref refid="group__metadata__flags_1ga228a95ca96f053e74e69e6d1ab23eccb" kindref="member">metadata_flags</ref></type>
          <declname>_have_metadata</declname>
        </param>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="706" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="706" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1af695a9f05d480594eea41dc122d6a750" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>boost::afio::directory_entry::directory_entry</definition>
        <argsstring>(const directory_entry &amp;)</argsstring>
        <name>directory_entry</name>
        <param>
          <type>const <ref refid="classboost_1_1afio_1_1directory__entry" kindref="compound">directory_entry</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="707"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a5b879de5d50d7acbbdb2acd62803770d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classboost_1_1afio_1_1directory__entry" kindref="compound">directory_entry</ref> &amp;</type>
        <definition>directory_entry&amp; boost::afio::directory_entry::operator=</definition>
        <argsstring>(const directory_entry &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classboost_1_1afio_1_1directory__entry" kindref="compound">directory_entry</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="708"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a26153f1ef545955c8a78185f79940c90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>boost::afio::directory_entry::directory_entry</definition>
        <argsstring>(directory_entry &amp;&amp;o)</argsstring>
        <name>directory_entry</name>
        <param>
          <type><ref refid="classboost_1_1afio_1_1directory__entry" kindref="compound">directory_entry</ref> &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="709" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="709" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a8d5e8442f064b0308cc4334719fe3d9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classboost_1_1afio_1_1directory__entry" kindref="compound">directory_entry</ref> &amp;</type>
        <definition>directory_entry&amp; boost::afio::directory_entry::operator=</definition>
        <argsstring>(directory_entry &amp;&amp;o)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classboost_1_1afio_1_1directory__entry" kindref="compound">directory_entry</ref> &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="711" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="710" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a02aa5405eb8125714b87e70fad55a2e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool boost::afio::directory_entry::operator==</definition>
        <argsstring>(const directory_entry &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classboost_1_1afio_1_1directory__entry" kindref="compound">directory_entry</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="718" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="718" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a36eaa107a21c178f7177f6d240f1f54e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool boost::afio::directory_entry::operator!=</definition>
        <argsstring>(const directory_entry &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classboost_1_1afio_1_1directory__entry" kindref="compound">directory_entry</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="719" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="719" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a0902fdeb81e01ca17f7002753fcc9a76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool boost::afio::directory_entry::operator&lt;</definition>
        <argsstring>(const directory_entry &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classboost_1_1afio_1_1directory__entry" kindref="compound">directory_entry</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="720" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="720" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a08ff1802403b5006dbfb1d694ef98644" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool boost::afio::directory_entry::operator&lt;=</definition>
        <argsstring>(const directory_entry &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classboost_1_1afio_1_1directory__entry" kindref="compound">directory_entry</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="721" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="721" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a085ba3cc68a8e8a2526ad88f9a00400e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool boost::afio::directory_entry::operator&gt;</definition>
        <argsstring>(const directory_entry &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classboost_1_1afio_1_1directory__entry" kindref="compound">directory_entry</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="722" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="722" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a3085873a15136077df50e639467e6fc8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool boost::afio::directory_entry::operator&gt;=</definition>
        <argsstring>(const directory_entry &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classboost_1_1afio_1_1directory__entry" kindref="compound">directory_entry</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="723" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="723" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1aabde5ce747d6092a4d69c23b6519251a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>filesystem::path</type>
        <definition>filesystem::path boost::afio::directory_entry::name</definition>
        <argsstring>() const noexcept</argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The name of the directory entry </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="725" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="725" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a5f15a6e3fd1be98932d6ef47cc90f170" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__metadata__flags_1ga228a95ca96f053e74e69e6d1ab23eccb" kindref="member">metadata_flags</ref></type>
        <definition>metadata_flags boost::afio::directory_entry::metadata_ready</definition>
        <argsstring>() const noexcept</argsstring>
        <name>metadata_ready</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A bitfield of what metadata is ready right now </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="727" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="727" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1ac7fdc301cf47a4964a3c91fad7b21368" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__metadata__flags_1ga228a95ca96f053e74e69e6d1ab23eccb" kindref="member">metadata_flags</ref></type>
        <definition>metadata_flags boost::afio::directory_entry::fetch_metadata</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh, metadata_flags wanted)</argsstring>
        <name>fetch_metadata</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
        </param>
        <param>
          <type><ref refid="group__metadata__flags_1ga228a95ca96f053e74e69e6d1ab23eccb" kindref="member">metadata_flags</ref></type>
          <declname>wanted</declname>
        </param>
        <briefdescription>
<para>Fetches the specified metadata, returning that newly available. This is a blocking call if wanted metadata is not yet ready. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The metadata now available in this directory entry. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An open handle to the entry&apos;s containing directory. You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wanted</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitfield of the metadata to fetch. This does not replace existing metadata. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="734" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="733" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a17bd6beaafd480dfd193c86462e56f54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structboost_1_1afio_1_1stat__t" kindref="compound">stat_t</ref></type>
        <definition>stat_t boost::afio::directory_entry::fetch_lstat</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh, metadata_flags wanted=directory_entry::metadata_fastpath())</argsstring>
        <name>fetch_lstat</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
        </param>
        <param>
          <type><ref refid="group__metadata__flags_1ga228a95ca96f053e74e69e6d1ab23eccb" kindref="member">metadata_flags</ref></type>
          <declname>wanted</declname>
          <defval><ref refid="classboost_1_1afio_1_1directory__entry_1a3ffc87e0e2d28facff8e2c5dd82c9e60" kindref="member">directory_entry::metadata_fastpath</ref>()</defval>
        </param>
        <briefdescription>
<para>Returns a copy of the internal `stat_t` structure. This is a blocking call if wanted metadata is not yet ready. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A copy of the internal `stat_t` structure. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An open handle to the entry&apos;s containing directory. You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wanted</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitfield of the metadata to fetch. This does not replace existing metadata. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="747" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="746" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a2e798a994154158fecc6efda9920cdc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_dev</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_dev</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_dev. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="761" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="761" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1aa0482904c823c4fd85cc722345cc25e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_ino</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_ino</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_ino. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="764" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="764" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a299b2ac498dee3d7004dd1e883371432" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_type</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_type</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="766" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="766" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a342b9962815410f572d33cd035305e73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_perms</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_perms</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_perms. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="769" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="769" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a557f5ed2a1cf93d2a5cb0423645e08a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_nlink</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_nlink</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_nlink. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="772" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="772" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a0a579e40d1d71b7a82fc1c27d6f9b212" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_uid</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_uid</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_uid. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="775" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="775" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a8fa7672fd378f70e16fe4c0117116d70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_gid</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_gid</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_gid. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="777" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="777" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1af399861cb3eb13c4fe28d43eee22235e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_rdev</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_rdev</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_rdev. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="779" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="779" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1afe536670b0d4e443e2efb0ea47ac4a19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_atim</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_atim</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_atim. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="782" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="782" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1ae6300725a98717c5d538a9b289c7c9dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_mtim</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_mtim</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_mtim. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="784" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="784" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a60a3b56b7c71193e32a660dbee7ea94c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_ctim</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_ctim</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_ctim. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="786" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="786" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a5e9f190635256daf09b2ed99bf81c838" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_size</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_size</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="788" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="788" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1aea93d6bd11c15a1edcf87a9b8b8626f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_allocated</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_allocated</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_allocated. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="790" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="790" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1ad1ef4d6b5963af073b3ea528b78080a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_blocks</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_blocks</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_blocks. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="792" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="792" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1ae1698c27bc6330f789df721f4202419f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_blksize</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_blksize</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_blksize. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="794" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="794" bodyend="794"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1aa22079e727e0314323e6511a60b4e53a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_flags</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_flags</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_flags. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="796" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="796" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a77f716b223ef9123d18fa2f66369ffaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_gen</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_gen</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_gen. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="798" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="798" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1afc8cbcad44546653218dba9f20c443fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>fieldtype</type>
        <definition>fieldtype boost::afio::directory_entry::st_birthtim</definition>
        <argsstring>(std::shared_ptr&lt; async_io_handle &gt; dirh=std::shared_ptr&lt; async_io_handle &gt;())</argsstring>
        <name>st_birthtim</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;</type>
          <declname>dirh</declname>
          <defval>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Returns st_birthtim. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirh</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional open handle to the entry&apos;s containing directory if fetching missing metadata is desired (an exception is thrown otherwise). You can get this from an op ref using dirop.h-&gt;get(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="800" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="800" bodyend="800"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1ac58aa01a5ffde92e6725f7ec11946197" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__metadata__flags_1ga228a95ca96f053e74e69e6d1ab23eccb" kindref="member">metadata_flags</ref></type>
        <definition>static metadata_flags boost::afio::directory_entry::metadata_supported</definition>
        <argsstring>() noexcept</argsstring>
        <name>metadata_supported</name>
        <briefdescription>
<para>A bitfield of what metadata is available on this platform. This doesn&apos;t mean all is available for every filing system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="803"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a3ffc87e0e2d28facff8e2c5dd82c9e60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__metadata__flags_1ga228a95ca96f053e74e69e6d1ab23eccb" kindref="member">metadata_flags</ref></type>
        <definition>static metadata_flags boost::afio::directory_entry::metadata_fastpath</definition>
        <argsstring>() noexcept</argsstring>
        <name>metadata_fastpath</name>
        <briefdescription>
<para>A bitfield of what metadata is fast on this platform. This doesn&apos;t mean all is available for every filing system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="805"/>
      </memberdef>
      <memberdef kind="function" id="classboost_1_1afio_1_1directory__entry_1a20770ff6a8c0589b3eebf933cf7c0475" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t boost::afio::directory_entry::compatibility_maximum</definition>
        <argsstring>() noexcept</argsstring>
        <name>compatibility_maximum</name>
        <briefdescription>
<para>The maximum number of entries which is &quot;usual&quot; to fetch at once i.e. what your libc does. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="807"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The abstract base class for an entry in a directory with lazily filled metadata. </para>    </briefdescription>
    <detaileddescription>
<para>Note that `directory_entry_hash` will hash one of these for you, and a `std::hash&lt;directory_entry&gt;` specialisation is defined for you so you ought to be able to use <ref refid="classboost_1_1afio_1_1directory__entry" kindref="compound">directory_entry</ref> directly in an `unordered_map&lt;&gt;`. </para>    </detaileddescription>
    <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="692" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="691" bodyend="808"/>
    <listofallmembers>
      <member refid="classboost_1_1afio_1_1directory__entry_1aa99ec8f3833788919a40325db6d7ca22" prot="private" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>_int_fetch</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a20770ff6a8c0589b3eebf933cf7c0475" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>compatibility_maximum</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a56f496ba01c9b613e83758582f2b06c9" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>detail::async_file_io_dispatcher_compat</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a06e10cc6179894e1e8bab39ccba6c476" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>detail::async_file_io_dispatcher_linux</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a4fb6d073a418fd80cc2b81450cc82687" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>detail::async_file_io_dispatcher_qnx</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a7eb74be36e15618561c7df1fbdacea5c" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>detail::async_file_io_dispatcher_windows</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a7e5452e32095af4f18ccb1c053bdc3c3" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>directory_entry</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1acb84b4c6de28b2f8bdacfe93d2ec8fa1" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>directory_entry</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1af695a9f05d480594eea41dc122d6a750" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>directory_entry</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a26153f1ef545955c8a78185f79940c90" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>directory_entry</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a17bd6beaafd480dfd193c86462e56f54" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>fetch_lstat</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1ac7fdc301cf47a4964a3c91fad7b21368" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>fetch_metadata</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a13789aab884f193c16480a4ed2c88ec6" prot="private" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>have_metadata</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a8096b2f6f12618711002bf8af831a9ed" prot="private" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>leafname</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a3ffc87e0e2d28facff8e2c5dd82c9e60" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>metadata_fastpath</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a5f15a6e3fd1be98932d6ef47cc90f170" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>metadata_ready</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1ac58aa01a5ffde92e6725f7ec11946197" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>metadata_supported</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1aabde5ce747d6092a4d69c23b6519251a" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>name</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a36eaa107a21c178f7177f6d240f1f54e" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>operator!=</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a0902fdeb81e01ca17f7002753fcc9a76" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>operator&lt;</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a08ff1802403b5006dbfb1d694ef98644" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>operator&lt;=</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a5b879de5d50d7acbbdb2acd62803770d" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>operator=</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a8d5e8442f064b0308cc4334719fe3d9f" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>operator=</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a02aa5405eb8125714b87e70fad55a2e0" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>operator==</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a085ba3cc68a8e8a2526ad88f9a00400e" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>operator&gt;</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a3085873a15136077df50e639467e6fc8" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>operator&gt;=</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1aea93d6bd11c15a1edcf87a9b8b8626f7" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_allocated</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1afe536670b0d4e443e2efb0ea47ac4a19" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_atim</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1afc8cbcad44546653218dba9f20c443fd" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_birthtim</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1ae1698c27bc6330f789df721f4202419f" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_blksize</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1ad1ef4d6b5963af073b3ea528b78080a0" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_blocks</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a60a3b56b7c71193e32a660dbee7ea94c" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_ctim</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a2e798a994154158fecc6efda9920cdc6" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_dev</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1aa22079e727e0314323e6511a60b4e53a" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_flags</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a77f716b223ef9123d18fa2f66369ffaa" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_gen</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a8fa7672fd378f70e16fe4c0117116d70" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_gid</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1aa0482904c823c4fd85cc722345cc25e5" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_ino</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1ae6300725a98717c5d538a9b289c7c9dc" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_mtim</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a557f5ed2a1cf93d2a5cb0423645e08a9" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_nlink</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a342b9962815410f572d33cd035305e73" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_perms</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1af399861cb3eb13c4fe28d43eee22235e" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_rdev</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a5e9f190635256daf09b2ed99bf81c838" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_size</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a299b2ac498dee3d7004dd1e883371432" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_type</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a0a579e40d1d71b7a82fc1c27d6f9b212" prot="public" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>st_uid</name></member>
      <member refid="classboost_1_1afio_1_1directory__entry_1a85eddc4d783f2d917192c34b25e8e00a" prot="private" virt="non-virtual"><scope>boost::afio::directory_entry</scope><name>stat</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
