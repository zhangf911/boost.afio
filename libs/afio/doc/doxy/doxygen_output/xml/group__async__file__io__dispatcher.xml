<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="group__async__file__io__dispatcher" kind="group">
    <compoundname>async_file_io_dispatcher</compoundname>
    <title>x</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__async__file__io__dispatcher_1ga412e5ba3eaf5c1df0499dad2ddd79fb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOST_AFIO_DECL std::shared_ptr&lt; async_file_io_dispatcher_base &gt;</type>
        <definition>BOOST_AFIO_DECL std::shared_ptr&lt;async_file_io_dispatcher_base&gt; boost::afio::make_async_file_io_dispatcher</definition>
        <argsstring>(std::shared_ptr&lt; thread_source &gt; threadpool=process_threadpool(), file_flags flagsforce=file_flags::None, file_flags flagsmask=file_flags::None)</argsstring>
        <name>make_async_file_io_dispatcher</name>
        <param>
          <type>std::shared_ptr&lt; thread_source &gt;</type>
          <declname>threadpool</declname>
          <defval>process_threadpool()</defval>
        </param>
        <param>
          <type>file_flags</type>
          <declname>flagsforce</declname>
          <defval>file_flags::None</defval>
        </param>
        <param>
          <type>file_flags</type>
          <declname>flagsmask</declname>
          <defval>file_flags::None</defval>
        </param>
        <briefdescription>
<para>Instatiates the best available async_file_io_dispatcher implementation for this system. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the number of threads in the threadpool supplied is the maximum non-async op queue depth (e.g. file opens, closes etc.). For fast SSDs, there isn&apos;t much gain after eight-sixteen threads, so the process threadpool is set to eight by default. For slow hard drives, or worse, SANs, a queue depth of 64 or higher might deliver significant benefits.</para><para><simplesect kind="return"><para>A shared_ptr to the best available async_file_io_dispatcher implementation for this system. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threadpool</parametername>
</parameternamelist>
<parameterdescription>
<para>The threadpool instance to use for asynchronous dispatch. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flagsforce</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to bitwise OR with any opened file flags. Used to force on certain flags. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flagsmask</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to bitwise AND with any opened file flags. Used to force off certain flags.</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk>
[heading Example]
[call_example]
</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="1831"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
