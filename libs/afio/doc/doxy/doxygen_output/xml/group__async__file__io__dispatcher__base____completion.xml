<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="group__async__file__io__dispatcher__base____completion" kind="group">
    <compoundname>async_file_io_dispatcher_base__completion</compoundname>
    <title>x</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__async__file__io__dispatcher__base____completion_1ga384aa77fea0f91d58814c50feeee44dc" prot="public" static="no">
        <type>std::pair&lt; bool, std::shared_ptr&lt; async_io_handle &gt; &gt;</type>
        <definition>typedef std::pair&lt;bool, std::shared_ptr&lt;async_io_handle&gt; &gt; boost::afio::async_file_io_dispatcher_base::completion_returntype</definition>
        <argsstring></argsstring>
        <name>completion_returntype</name>
        <briefdescription>
<para>The type returned by a completion handler. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="1096" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="1096" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__async__file__io__dispatcher__base____completion_1ga54bf743efd9a69d7dd11d01ce25fe304" prot="public" static="no">
        <type>completion_returntype</type>
        <definition>typedef completion_returntype boost::afio::async_file_io_dispatcher_base::completion_t(size_t, async_io_op)</definition>
        <argsstring>(size_t, async_io_op)</argsstring>
        <name>completion_t</name>
        <briefdescription>
<para>The type of a completion handler. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="1098" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="1098" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__async__file__io__dispatcher__base____completion_1ga6cb87e3ca62468c8027a0cf052a9ff24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; async_io_op &gt;</type>
        <definition>std::vector&lt;async_io_op&gt; boost::afio::async_file_io_dispatcher_base::completion</definition>
        <argsstring>(const std::vector&lt; async_io_op &gt; &amp;ops, const std::vector&lt; std::pair&lt; async_op_flags, std::function&lt; async_file_io_dispatcher_base::completion_t &gt;&gt;&gt; &amp;callbacks)</argsstring>
        <name>completion</name>
        <param>
          <type>const std::vector&lt; async_io_op &gt; &amp;</type>
          <declname>ops</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; async_op_flags, std::function&lt; async_file_io_dispatcher_base::completion_t &gt;&gt;&gt; &amp;</type>
          <declname>callbacks</declname>
        </param>
        <briefdescription>
<para>Schedule a batch of asynchronous invocations of the specified functions when their supplied operations complete. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A batch of op handles </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>A batch of precondition op handles. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callbacks</parametername>
</parameternamelist>
<parameterdescription>
<para>A batch of pairs of op flags and bound completion handler functions of type `completion_t`</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk.distinguish> batch bound functions</qbk.distinguish>   <qbk>[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete.</qbk>   <qbk>[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.</qbk>   <qbk>[heading Example][completion_example1]</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="1116"/>
      </memberdef>
      <memberdef kind="function" id="group__async__file__io__dispatcher__base____completion_1gac745f6f5424e142086cf45cc583f5aac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>async_io_op</type>
        <definition>async_io_op boost::afio::async_file_io_dispatcher_base::completion</definition>
        <argsstring>(const async_io_op &amp;req, const std::pair&lt; async_op_flags, std::function&lt; async_file_io_dispatcher_base::completion_t &gt;&gt; &amp;callback)</argsstring>
        <name>completion</name>
        <param>
          <type>const async_io_op &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type>const std::pair&lt; async_op_flags, std::function&lt; async_file_io_dispatcher_base::completion_t &gt;&gt; &amp;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Schedule the asynchronous invocation of the specified single function when the supplied single operation completes. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An op handle </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>A precondition op handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>A pair of op flag and bound completion handler function of type `completion_t`</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk.distinguish> single bound function</qbk.distinguish>   <qbk>[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete.</qbk>   <qbk>[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.</qbk>   <qbk>[heading Example][completion_example1]</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="1128" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="2804" bodyend="2812"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
