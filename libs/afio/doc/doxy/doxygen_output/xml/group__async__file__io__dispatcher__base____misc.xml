<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="group__async__file__io__dispatcher__base____misc" kind="group">
    <compoundname>async_file_io_dispatcher_base__misc</compoundname>
    <title>x</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__async__file__io__dispatcher__base____misc_1ga0dbf229a0b5733133f74aabf22d47609" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t boost::afio::async_file_io_dispatcher_base::page_size</definition>
        <argsstring>() noexcept</argsstring>
        <name>page_size</name>
        <briefdescription>
<para>Returns the page size of this architecture which is useful for calculating direct i/o multiples. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The page size of this architecture.</para></simplesect>
 <qbk>[heading Complexity]Whatever the system API takes (one would hope constant time).</qbk>   <qbk>[heading Exception Model]Never throws any exception.</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="1730"/>
      </memberdef>
      <memberdef kind="function" id="group__async__file__io__dispatcher__base____misc_1ga006bef030dab5c7bc67fbdc5bc352cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void boost::afio::async_file_io_dispatcher_base::complete_async_op</definition>
        <argsstring>(size_t id, std::shared_ptr&lt; async_io_handle &gt; h, exception_ptr e=exception_ptr())</argsstring>
        <name>complete_async_op</name>
        <param>
          <type>size_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; async_io_handle &gt;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>exception_ptr</type>
          <declname>e</declname>
          <defval>exception_ptr()</defval>
        </param>
        <briefdescription>
<para>Completes an operation with a handle or an error, usually used when an operation was previously deferred. </para>        </briefdescription>
        <detaileddescription>
<para> <qbk.distinguish> normal</qbk.distinguish>   <qbk>[heading Complexity]O(N) where N is the number of completions dependent on this op.</qbk>   <qbk>[heading Exception Model]Should not throw any exception except for out of memory.</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="1739"/>
      </memberdef>
      <memberdef kind="function" id="group__async__file__io__dispatcher__base____misc_1ga39bb6e878d9ad0b4b926e31ced073177" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void boost::afio::async_file_io_dispatcher_base::complete_async_op</definition>
        <argsstring>(size_t id, exception_ptr e)</argsstring>
        <name>complete_async_op</name>
        <param>
          <type>size_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>exception_ptr</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Completes an operation with an error, usually used when an operation was previously deferred. </para>        </briefdescription>
        <detaileddescription>
<para> <qbk.distinguish> errored</qbk.distinguish>   <qbk>[heading Complexity]O(N) where N is the number of completions dependent on this op.</qbk>   <qbk>[heading Exception Model]Should not throw any exception except for out of memory.</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="1747" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="1747" bodyend="1747"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
