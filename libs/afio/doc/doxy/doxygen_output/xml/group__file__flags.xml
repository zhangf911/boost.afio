<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="group__file__flags" kind="group">
    <compoundname>file_flags</compoundname>
    <title>x</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__file__flags_1ga1615042683add1802cfc6dc86bd078ee" prot="public" static="no">
        <name>file_flags</name>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438ae0096787b72fc78233c9f8ee4aa49685" prot="public">
          <name>None</name>
          <initializer>0</initializer>
          <briefdescription>
<para>No flags set. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea56afe458614fb4a10b626f321ea1a26f" prot="public">
          <name>Read</name>
          <initializer>1</initializer>
          <briefdescription>
<para>Read access. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea8ce87e24f8fc7badbb6706741f3b2720" prot="public">
          <name>Write</name>
          <initializer>2</initializer>
          <briefdescription>
<para>Write access. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea9b4de5661424e3caea20df95fdf1babf" prot="public">
          <name>ReadWrite</name>
          <initializer>3</initializer>
          <briefdescription>
<para>Read and write access. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeabb5d6d0e03d75b41c1d997aa76814f44" prot="public">
          <name>Append</name>
          <initializer>4</initializer>
          <briefdescription>
<para>Append only. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea4435f8faf3f874da4982029477760ccc" prot="public">
          <name>Truncate</name>
          <initializer>8</initializer>
          <briefdescription>
<para>Truncate existing file to zero. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea3dfadea846f01e01560a979e2e5fb028" prot="public">
          <name>Create</name>
          <initializer>16</initializer>
          <briefdescription>
<para>Open and create if doesn&apos;t exist. Always creates sparse files if possible. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeafd5a0d55a39854c5da74bbded9ee167f" prot="public">
          <name>CreateOnlyIfNotExist</name>
          <initializer>32</initializer>
          <briefdescription>
<para>Create and open only if doesn&apos;t exist. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea7c850c8a5e1da53d306d2d31eb14d61b" prot="public">
          <name>CreateCompressed</name>
          <initializer>64</initializer>
          <briefdescription>
<para>Create a compressed file, needs to be combined with one of the other create flags. Only succeeds if supported by the underlying filing system. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea9ac18f659ad2d9695501f04ce2b49e2f" prot="public">
          <name>WillBeSequentiallyAccessed</name>
          <initializer>128</initializer>
          <briefdescription>
<para>Will be exclusively either read or written sequentially. If you&apos;re exclusively writing sequentially, <emphasis>strongly</emphasis> consider turning on OSDirect too. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea12fb86815852d7f9144110fa38dbfb5f" prot="public">
          <name>WillBeRandomlyAccessed</name>
          <initializer>256</initializer>
          <briefdescription>
<para>Will be randomly accessed, so don&apos;t bother with read-ahead. If you&apos;re using this, <emphasis>strongly</emphasis> consider turning on OSDirect too. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeaeafb311263d328603431d2bf231c6a0e" prot="public">
          <name>NoSparse</name>
          <initializer>512</initializer>
          <briefdescription>
<para>Don&apos;t create sparse files. May be ignored by some filing systems (e.g. ext4). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea8e7a42449e906c304998c81e7490fd16" prot="public">
          <name>FastDirectoryEnumeration</name>
          <initializer>(1&lt;&lt;10)</initializer>
          <briefdescription>
<para>Hold a file handle open to the containing directory of each open file for fast directory enumeration. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeae2b4f36c7d426549b211d89ffcd02e12" prot="public">
          <name>UniqueDirectoryHandle</name>
          <initializer>(1&lt;&lt;11)</initializer>
          <briefdescription>
<para>Return a unique directory handle rather than a shared directory handle. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea70411777b52492bfe0bac4e4294a3357" prot="public">
          <name>TemporaryFile</name>
          <initializer>(1&lt;&lt;12)</initializer>
          <briefdescription>
<para>On some systems causes dirty cache data to not be written to physical storage until file close. Useful for temporary files and lock files, especially on Windows when combined with DeleteOnClose as this avoids an fsync of the containing directory on file close. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea47a4fbfd2b202e3b9e28a4dcccde84b5" prot="public">
          <name>DeleteOnClose</name>
          <initializer>(1&lt;&lt;13)</initializer>
          <briefdescription>
<para>Only when combined with CreateOnlyIfNotExist, deletes the file on close. This is especially useful on Windows with temporary and lock files where normally closing a file is an implicit fsync of its containing directory. Note on POSIX this unlinks the file on first close by AFIO, whereas on Windows the operating system unlinks the file on last close including sudden application exit. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea45296419ce890d99a255351f4ac9f1fa" prot="public">
          <name>OSDirect</name>
          <initializer>(1&lt;&lt;16)</initializer>
          <briefdescription>
<para>Bypass the OS file buffers (only really useful for writing large files, or a lot of random reads and writes. Note you must 4Kb align everything if this is on) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeaba7941781a18ef1d3a4f5345b9d44a53" prot="public">
          <name>OSMMap</name>
          <initializer>(1&lt;&lt;17)</initializer>
          <briefdescription>
<para>Memory map files (for reads only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea05738a480cd6f577ef828ca2637bdf29" prot="public">
          <name>AlwaysSync</name>
          <initializer>(1&lt;&lt;24)</initializer>
          <briefdescription>
<para>Ask the OS to not complete until the data is on the physical storage. Best used only with OSDirect, otherwise use SyncOnClose. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeaad1d36e2219ffcd464bb8d37a0c42adc" prot="public">
          <name>SyncOnClose</name>
          <initializer>(1&lt;&lt;25)</initializer>
          <briefdescription>
<para>Automatically initiate an asynchronous flush just before file close, and fuse both operations so both must complete for close to complete. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea6d91e48b65e695d61a43d7e867babebd" prot="public">
          <name>EnforceDependencyWriteOrder</name>
          <initializer>(1&lt;&lt;26)</initializer>
          <briefdescription>
<para>Ensure that data writes to files reach physical storage in the same order as the op dependencies close files. Does NOT enforce ordering of individual data writes, ONLY all file writes accumulated before a file close. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeac3128415027844faf71bc34a5f6de5b8" prot="public">
          <name>int_opening_link</name>
          <initializer>(1&lt;&lt;29)</initializer>
          <briefdescription>
<para>Internal use only. Don&apos;t use. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeae4d81f61126d0b6609dbebf8d21de2fa" prot="public">
          <name>int_opening_dir</name>
          <initializer>(1&lt;&lt;30)</initializer>
          <briefdescription>
<para>Internal use only. Don&apos;t use. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Bitwise file and directory open flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="390" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="386" bodyend="419"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
