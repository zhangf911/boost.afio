<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="namespaceboost_1_1afio" kind="namespace">
    <compoundname>boost::afio</compoundname>
    <innerclass refid="classboost_1_1afio_1_1enqueued__task_3_01_r_07_08_4" prot="public">boost::afio::enqueued_task&lt; R()&gt;</innerclass>
    <innerclass refid="classboost_1_1afio_1_1enqueued__task_3_01void_07_08_4" prot="public">boost::afio::enqueued_task&lt; void()&gt;</innerclass>
    <innerclass refid="classboost_1_1afio_1_1thread__source" prot="public">boost::afio::thread_source</innerclass>
    <innerclass refid="classboost_1_1afio_1_1std__thread__pool" prot="public">boost::afio::std_thread_pool</innerclass>
    <innerclass refid="structboost_1_1afio_1_1stat__t" prot="public">boost::afio::stat_t</innerclass>
    <innerclass refid="structboost_1_1afio_1_1statfs__t" prot="public">boost::afio::statfs_t</innerclass>
    <innerclass refid="classboost_1_1afio_1_1directory__entry" prot="public">boost::afio::directory_entry</innerclass>
    <innerclass refid="structboost_1_1afio_1_1directory__entry__hash" prot="public">boost::afio::directory_entry_hash</innerclass>
    <innerclass refid="classboost_1_1afio_1_1async__io__handle" prot="public">boost::afio::async_io_handle</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__io__op" prot="public">boost::afio::async_io_op</innerclass>
    <innerclass refid="classboost_1_1afio_1_1async__file__io__dispatcher__base" prot="public">boost::afio::async_file_io_dispatcher_base</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__path__op__req" prot="public">boost::afio::async_path_op_req</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req" prot="public">boost::afio::async_data_op_req</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01const_01_t_01_4" prot="public">boost::afio::async_data_op_req&lt; const T &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01void_01_4" prot="public">boost::afio::async_data_op_req&lt; void &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01const_01void_01_4" prot="public">boost::afio::async_data_op_req&lt; const void &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01std_1_1vector_3_01_t_00_01_a_01_4_01_4" prot="public">boost::afio::async_data_op_req&lt; std::vector&lt; T, A &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01const_01std_1_1vector_3_01_t_00_01_a_01_4_01_4" prot="public">boost::afio::async_data_op_req&lt; const std::vector&lt; T, A &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4" prot="public">boost::afio::async_data_op_req&lt; std::array&lt; T, N &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01const_01std_1_1array_3_01_t_00_01_n_01_4_01_4" prot="public">boost::afio::async_data_op_req&lt; const std::array&lt; T, N &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01std_1_1vector_3_01asio_1_1mutable__buffer_00_01_a_01_4_01_4" prot="public">boost::afio::async_data_op_req&lt; std::vector&lt; asio::mutable_buffer, A &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01std_1_1vector_3_01asio_1_1const__buffer_00_01_a_01_4_01_4" prot="public">boost::afio::async_data_op_req&lt; std::vector&lt; asio::const_buffer, A &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01std_1_1array_3_01asio_1_1mutable__buffer_00_01_n_01_4_01_4" prot="public">boost::afio::async_data_op_req&lt; std::array&lt; asio::mutable_buffer, N &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01std_1_1array_3_01asio_1_1const__buffer_00_01_n_01_4_01_4" prot="public">boost::afio::async_data_op_req&lt; std::array&lt; asio::const_buffer, N &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01std_1_1basic__string_3_01_c_00_01_t_00_01_a_01_4_01_4" prot="public">boost::afio::async_data_op_req&lt; std::basic_string&lt; C, T, A &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01const_01std_1_1basic__string_3_01_c_00_01_t_00_01_a_01_4_01_4" prot="public">boost::afio::async_data_op_req&lt; const std::basic_string&lt; C, T, A &gt; &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01asio_1_1mutable__buffer_01_4" prot="public">boost::afio::async_data_op_req&lt; asio::mutable_buffer &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__data__op__req_3_01asio_1_1const__buffer_01_4" prot="public">boost::afio::async_data_op_req&lt; asio::const_buffer &gt;</innerclass>
    <innerclass refid="structboost_1_1afio_1_1async__enumerate__op__req" prot="public">boost::afio::async_enumerate_op_req</innerclass>
    <innernamespace refid="namespaceboost_1_1afio_1_1detail">boost::afio::detail</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__file__flags_1ga1615042683add1802cfc6dc86bd078ee" prot="public" static="no">
        <name>file_flags</name>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438ae0096787b72fc78233c9f8ee4aa49685" prot="public">
          <name>None</name>
          <initializer>0</initializer>
          <briefdescription>
<para>No flags set. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea56afe458614fb4a10b626f321ea1a26f" prot="public">
          <name>Read</name>
          <initializer>1</initializer>
          <briefdescription>
<para>Read access. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea8ce87e24f8fc7badbb6706741f3b2720" prot="public">
          <name>Write</name>
          <initializer>2</initializer>
          <briefdescription>
<para>Write access. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea9b4de5661424e3caea20df95fdf1babf" prot="public">
          <name>ReadWrite</name>
          <initializer>3</initializer>
          <briefdescription>
<para>Read and write access. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeabb5d6d0e03d75b41c1d997aa76814f44" prot="public">
          <name>Append</name>
          <initializer>4</initializer>
          <briefdescription>
<para>Append only. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea4435f8faf3f874da4982029477760ccc" prot="public">
          <name>Truncate</name>
          <initializer>8</initializer>
          <briefdescription>
<para>Truncate existing file to zero. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea3dfadea846f01e01560a979e2e5fb028" prot="public">
          <name>Create</name>
          <initializer>16</initializer>
          <briefdescription>
<para>Open and create if doesn&apos;t exist. Always creates sparse files if possible. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeafd5a0d55a39854c5da74bbded9ee167f" prot="public">
          <name>CreateOnlyIfNotExist</name>
          <initializer>32</initializer>
          <briefdescription>
<para>Create and open only if doesn&apos;t exist. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea7c850c8a5e1da53d306d2d31eb14d61b" prot="public">
          <name>CreateCompressed</name>
          <initializer>64</initializer>
          <briefdescription>
<para>Create a compressed file, needs to be combined with one of the other create flags. Only succeeds if supported by the underlying filing system. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea9ac18f659ad2d9695501f04ce2b49e2f" prot="public">
          <name>WillBeSequentiallyAccessed</name>
          <initializer>128</initializer>
          <briefdescription>
<para>Will be exclusively either read or written sequentially. If you&apos;re exclusively writing sequentially, <emphasis>strongly</emphasis> consider turning on OSDirect too. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea12fb86815852d7f9144110fa38dbfb5f" prot="public">
          <name>WillBeRandomlyAccessed</name>
          <initializer>256</initializer>
          <briefdescription>
<para>Will be randomly accessed, so don&apos;t bother with read-ahead. If you&apos;re using this, <emphasis>strongly</emphasis> consider turning on OSDirect too. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeaeafb311263d328603431d2bf231c6a0e" prot="public">
          <name>NoSparse</name>
          <initializer>512</initializer>
          <briefdescription>
<para>Don&apos;t create sparse files. May be ignored by some filing systems (e.g. ext4). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea8e7a42449e906c304998c81e7490fd16" prot="public">
          <name>FastDirectoryEnumeration</name>
          <initializer>(1&lt;&lt;10)</initializer>
          <briefdescription>
<para>Hold a file handle open to the containing directory of each open file for fast directory enumeration. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeae2b4f36c7d426549b211d89ffcd02e12" prot="public">
          <name>UniqueDirectoryHandle</name>
          <initializer>(1&lt;&lt;11)</initializer>
          <briefdescription>
<para>Return a unique directory handle rather than a shared directory handle. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea45296419ce890d99a255351f4ac9f1fa" prot="public">
          <name>OSDirect</name>
          <initializer>(1&lt;&lt;16)</initializer>
          <briefdescription>
<para>Bypass the OS file buffers (only really useful for writing large files, or a lot of random reads and writes. Note you must 4Kb align everything if this is on) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeaba7941781a18ef1d3a4f5345b9d44a53" prot="public">
          <name>OSMMap</name>
          <initializer>(1&lt;&lt;17)</initializer>
          <briefdescription>
<para>Memory map files (for reads only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea05738a480cd6f577ef828ca2637bdf29" prot="public">
          <name>AlwaysSync</name>
          <initializer>(1&lt;&lt;24)</initializer>
          <briefdescription>
<para>Ask the OS to not complete until the data is on the physical storage. Best used only with OSDirect, otherwise use SyncOnClose. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeaad1d36e2219ffcd464bb8d37a0c42adc" prot="public">
          <name>SyncOnClose</name>
          <initializer>(1&lt;&lt;25)</initializer>
          <briefdescription>
<para>Automatically initiate an asynchronous flush just before file close, and fuse both operations so both must complete for close to complete. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eea6d91e48b65e695d61a43d7e867babebd" prot="public">
          <name>EnforceDependencyWriteOrder</name>
          <initializer>(1&lt;&lt;26)</initializer>
          <briefdescription>
<para>Ensure that data writes to files reach physical storage in the same order as the op dependencies close files. Does NOT enforce ordering of individual data writes, ONLY all file writes accumulated before a file close. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeac3128415027844faf71bc34a5f6de5b8" prot="public">
          <name>int_opening_link</name>
          <initializer>(1&lt;&lt;29)</initializer>
          <briefdescription>
<para>Internal use only. Don&apos;t use. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga1615042683add1802cfc6dc86bd078eeae4d81f61126d0b6609dbebf8d21de2fa" prot="public">
          <name>int_opening_dir</name>
          <initializer>(1&lt;&lt;30)</initializer>
          <briefdescription>
<para>Internal use only. Don&apos;t use. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Bitwise file and directory open flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="388" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="384" bodyend="415"/>
      </memberdef>
      <memberdef kind="enum" id="group__async__op__flags_1ga3d03d4b42e2ae303e282d0a1dec22976" prot="public" static="no">
        <name>async_op_flags</name>
        <enumvalue id="namespaceboost_1_1afio_1ga3d03d4b42e2ae303e282d0a1dec22976a78dc04e05e979dbe81227be8cdf9f74d" prot="public">
          <name>none</name>
          <initializer>0</initializer>
          <briefdescription>
<para>No flags set. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga3d03d4b42e2ae303e282d0a1dec22976aef60ffef4d2047749b204c64707b834b" prot="public">
          <name>immediate</name>
          <initializer>1</initializer>
          <briefdescription>
<para>Call chained completion immediately instead of scheduling for later. Make SURE your completion can not block! </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Bitwise async_op_flags flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="427" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="423" bodyend="430"/>
      </memberdef>
      <memberdef kind="enum" id="group__metadata__flags_1ga228a95ca96f053e74e69e6d1ab23eccb" prot="public" static="no">
        <name>metadata_flags</name>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438ae0096787b72fc78233c9f8ee4aa49685" prot="public">
          <name>None</name>
          <initializer>0</initializer>
          <briefdescription>
<para>No flags set. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccba8d92304adde6ffb02a470ef16dcea2b3" prot="public">
          <name>dev</name>
          <initializer>1&lt;&lt;0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccba787bc34270cc0c198e5b64b89ba6f41a" prot="public">
          <name>ino</name>
          <initializer>1&lt;&lt;1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccba2dbdb9bd28a1ba50c32ea6875df8ac00" prot="public">
          <name>type</name>
          <initializer>1&lt;&lt;2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccbab998f2583c3b13ecdc1b1102f14fbfca" prot="public">
          <name>perms</name>
          <initializer>1&lt;&lt;3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccba01868e8b094df43daa0931a241f290bc" prot="public">
          <name>nlink</name>
          <initializer>1&lt;&lt;4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccba1ef07d55d03ad8cfa9e60f94bf896131" prot="public">
          <name>uid</name>
          <initializer>1&lt;&lt;5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccba68b3f8b217d65c01c73753ee49ae7f65" prot="public">
          <name>gid</name>
          <initializer>1&lt;&lt;6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccba062c9dff3eff839d8b8fce5d8045631f" prot="public">
          <name>rdev</name>
          <initializer>1&lt;&lt;7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccbaf5feb7e3905036ecef11e0f6af1d5899" prot="public">
          <name>atim</name>
          <initializer>1&lt;&lt;8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccba641e32ba51f6dd15575dbd0eda7fd729" prot="public">
          <name>mtim</name>
          <initializer>1&lt;&lt;9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccba37af1d326dfcec6d55987da7c25063a7" prot="public">
          <name>ctim</name>
          <initializer>1&lt;&lt;10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccba049b10b414166800694c37ffa65bb0f9" prot="public">
          <name>size</name>
          <initializer>1&lt;&lt;11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccbab43390eb905bf3f83ab9b3ca1fd7a215" prot="public">
          <name>allocated</name>
          <initializer>1&lt;&lt;12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438a0bcb40db3022fed4a921c42c6789896e" prot="public">
          <name>blocks</name>
          <initializer>1&lt;&lt;13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccbaf361dda8b452b7c98f2d65e6a36f0817" prot="public">
          <name>blksize</name>
          <initializer>1&lt;&lt;14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438a236458a316ee2aab7eaed4d2abf214f4" prot="public">
          <name>flags</name>
          <initializer>1&lt;&lt;15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccbacc5f406fc5587724422f0550a490f3bc" prot="public">
          <name>gen</name>
          <initializer>1&lt;&lt;16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccbac7503d63db3bf08a2fe90be45abe8e60" prot="public">
          <name>birthtim</name>
          <initializer>1&lt;&lt;17</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccba1d83449c2d0f22b258f6bdd857b51637" prot="public">
          <name>sparse</name>
          <initializer>1&lt;&lt;24</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1ga228a95ca96f053e74e69e6d1ab23eccbafd28f8181a3776b9aacb8a97d40d37ef" prot="public">
          <name>compressed</name>
          <initializer>1&lt;&lt;25</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438a0b6c15d8f7aeebc47c400a5dd9b1c44c" prot="public">
          <name>All</name>
          <initializer>(size_t)-1</initializer>
          <briefdescription>
<para>Return the maximum possible metadata. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Bitflags for availability of metadata from `struct stat_t`. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="510" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="506" bodyend="533"/>
      </memberdef>
      <memberdef kind="enum" id="group__fs__metadata__flags_1gadc548bc518f40378c9c9c97f4a994438" prot="public" static="no">
        <name>fs_metadata_flags</name>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438ae0096787b72fc78233c9f8ee4aa49685" prot="public">
          <name>None</name>
          <initializer>0</initializer>
          <briefdescription>
<para>No flags set. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438a236458a316ee2aab7eaed4d2abf214f4" prot="public">
          <name>flags</name>
          <initializer>1&lt;&lt;15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438a69fd1cdce33c03fcc6efeee4c4244981" prot="public">
          <name>bsize</name>
          <initializer>1&lt;&lt;2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438ae259fc2997dc9def8ba30206f0532e51" prot="public">
          <name>iosize</name>
          <initializer>1&lt;&lt;3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438a0bcb40db3022fed4a921c42c6789896e" prot="public">
          <name>blocks</name>
          <initializer>1&lt;&lt;13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438a1e47e7816d95c9c7f84281a32f63413a" prot="public">
          <name>bfree</name>
          <initializer>1&lt;&lt;5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438a5680a19261a5acf9fb785cd02cf6dde6" prot="public">
          <name>bavail</name>
          <initializer>1&lt;&lt;6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438a55b4fd78b7fa94289726a04b21e27aba" prot="public">
          <name>files</name>
          <initializer>1&lt;&lt;7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438a2bbf102702b3d3c535e84cc16de0a6ab" prot="public">
          <name>ffree</name>
          <initializer>1&lt;&lt;8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438a4828645ba1d8c351473c3dcbe7bc41b4" prot="public">
          <name>namemax</name>
          <initializer>1&lt;&lt;9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438a9bda723e0ca224a0d2c3ff243b5cd88f" prot="public">
          <name>owner</name>
          <initializer>1&lt;&lt;10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438a8b6ef0e907e57c3a3f3d4e44545a1028" prot="public">
          <name>fsid</name>
          <initializer>1&lt;&lt;11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438aed0c2fb8653a2d4a690e20d29fb6cd2e" prot="public">
          <name>fstypename</name>
          <initializer>1&lt;&lt;12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438ad80c0b17f7bf0dfa982edc6aa6fa211b" prot="public">
          <name>mntfromname</name>
          <initializer>1&lt;&lt;13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438a08ce3747edf979603fcfe8c7b151723a" prot="public">
          <name>mntonname</name>
          <initializer>1&lt;&lt;14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceboost_1_1afio_1gadc548bc518f40378c9c9c97f4a994438a0b6c15d8f7aeebc47c400a5dd9b1c44c" prot="public">
          <name>All</name>
          <initializer>(size_t)-1</initializer>
          <briefdescription>
<para>Return the maximum possible metadata. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Bitflags for availability of metadata from `struct statfs_t`. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="620" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="616" bodyend="637"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceboost_1_1afio_1a90c6d3eb9c6ffd8c9b90e0d4578415e0" prot="public" static="no">
        <type>unsigned long long</type>
        <definition>typedef unsigned long long boost::afio::off_t</definition>
        <argsstring></argsstring>
        <name>off_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="105" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__process__threadpool_1gabb4747cc11ef3ee1bbb969bc78c238bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOST_AFIO_DECL std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1std__thread__pool" kindref="compound">std_thread_pool</ref> &gt;</type>
        <definition>BOOST_AFIO_DECL std::shared_ptr&lt;std_thread_pool&gt; boost::afio::process_threadpool</definition>
        <argsstring>()</argsstring>
        <name>process_threadpool</name>
        <briefdescription>
<para>Returns the process threadpool. </para>        </briefdescription>
        <detaileddescription>
<para>On first use, this instantiates a default <ref refid="classboost_1_1afio_1_1std__thread__pool" kindref="compound">std_thread_pool</ref> running `BOOST_AFIO_MAX_NON_ASYNC_QUEUE_DEPTH` threads which will remain until its shared count reaches zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="351"/>
      </memberdef>
      <memberdef kind="function" id="group__async__file__io__dispatcher_1ga412e5ba3eaf5c1df0499dad2ddd79fb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOST_AFIO_DECL std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__file__io__dispatcher__base" kindref="compound">async_file_io_dispatcher_base</ref> &gt;</type>
        <definition>BOOST_AFIO_DECL std::shared_ptr&lt;async_file_io_dispatcher_base&gt; boost::afio::make_async_file_io_dispatcher</definition>
        <argsstring>(std::shared_ptr&lt; thread_source &gt; threadpool=process_threadpool(), file_flags flagsforce=file_flags::None, file_flags flagsmask=file_flags::None)</argsstring>
        <name>make_async_file_io_dispatcher</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1thread__source" kindref="compound">thread_source</ref> &gt;</type>
          <declname>threadpool</declname>
          <defval>process_threadpool()</defval>
        </param>
        <param>
          <type><ref refid="group__file__flags_1ga1615042683add1802cfc6dc86bd078ee" kindref="member">file_flags</ref></type>
          <declname>flagsforce</declname>
          <defval>file_flags::None</defval>
        </param>
        <param>
          <type><ref refid="group__file__flags_1ga1615042683add1802cfc6dc86bd078ee" kindref="member">file_flags</ref></type>
          <declname>flagsmask</declname>
          <defval>file_flags::None</defval>
        </param>
        <briefdescription>
<para>Instatiates the best available async_file_io_dispatcher implementation for this system. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the number of threads in the threadpool supplied is the maximum non-async op queue depth (e.g. file opens, closes etc.). For fast SSDs, there isn&apos;t much gain after eight-sixteen threads, so the process threadpool is set to eight by default. For slow hard drives, or worse, SANs, a queue depth of 64 or higher might deliver significant benefits.</para><para><simplesect kind="return"><para>A shared_ptr to the best available async_file_io_dispatcher implementation for this system. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threadpool</parametername>
</parameternamelist>
<parameterdescription>
<para>The threadpool instance to use for asynchronous dispatch. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flagsforce</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to bitwise OR with any opened file flags. Used to force on certain flags. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flagsmask</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to bitwise AND with any opened file flags. Used to force off certain flags.</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk>
[heading Example]
[call_example]
</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="1768"/>
      </memberdef>
      <memberdef kind="function" id="group__when__all__ops_1gadd8ae93c91c23b1011dfdf002db07e9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1afio_1_1detail_1_1enable__if__async__op" kindref="compound">detail::enable_if_async_op</ref>&lt; true, typename Iterator::value_type &gt;::type</type>
        <definition>detail::enable_if_async_op&lt;true, typename Iterator::value_type&gt;::type boost::afio::when_all</definition>
        <argsstring>(std::nothrow_t _, Iterator first, Iterator last)</argsstring>
        <name>when_all</name>
        <param>
          <type>std::nothrow_t</type>
          <declname>_</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Returns a result when all the supplied ops complete. Does not propagate exception states. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A future vector of shared_ptr&apos;s to <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref>. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>class Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of std::nothrow_t. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator pointing to the first <ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref> to wait upon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator pointing after the last <ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref> to wait upon.</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk.distinguish> iterator batch of ops not exception propagating</qbk.distinguish>   <qbk>[heading Complexity]O(N).</qbk>   <qbk>[heading Exception Model]Non propagating</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="1918" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="1917" bodyend="1922"/>
      </memberdef>
      <memberdef kind="function" id="group__when__all__ops_1ga85c6d5c463b1ecffdc2a6bda4f040bb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1afio_1_1detail_1_1enable__if__async__op" kindref="compound">detail::enable_if_async_op</ref>&lt; false, typename Iterator::value_type &gt;::type</type>
        <definition>detail::enable_if_async_op&lt;false, typename Iterator::value_type&gt;::type boost::afio::when_any</definition>
        <argsstring>(std::nothrow_t _, Iterator first, Iterator last)</argsstring>
        <name>when_any</name>
        <param>
          <type>std::nothrow_t</type>
          <declname>_</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Returns a result when any the supplied ops complete. Does not propagate exception states. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A future vector of shared_ptr&apos;s to <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref>. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>class Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of std::nothrow_t. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator pointing to the first <ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref> to wait upon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator pointing after the last <ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref> to wait upon.</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk.distinguish> iterator batch of ops not exception propagating</qbk.distinguish>   <qbk>[heading Complexity]O(N).</qbk>   <qbk>[heading Exception Model]Non propagating</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="1936" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="1935" bodyend="1940"/>
      </memberdef>
      <memberdef kind="function" id="group__when__all__ops_1ga5598f81e0788f6acd2258263009de875" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>future&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt; &gt; &gt;</type>
        <definition>future&lt;std::vector&lt;std::shared_ptr&lt;async_io_handle&gt; &gt; &gt; boost::afio::when_all</definition>
        <argsstring>(std::nothrow_t _, std::vector&lt; async_io_op &gt; ops)</argsstring>
        <name>when_all</name>
        <param>
          <type>std::nothrow_t</type>
          <declname>_</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref> &gt;</type>
          <declname>ops</declname>
        </param>
        <briefdescription>
<para>Returns a result when all the supplied ops complete. Does not propagate exception states. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A future vector of shared_ptr&apos;s to <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of std::nothrow_t. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of the async_io_ops to wait upon.</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk.distinguish> vector batch of ops not exception propagating</qbk.distinguish>   <qbk>[heading Complexity]O(N).</qbk>   <qbk>[heading Exception Model]Non propagating</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="1952" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="1951" bodyend="1956"/>
      </memberdef>
      <memberdef kind="function" id="group__when__all__ops_1gaeb4173eee90e57cc0646056bd14603de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>future&lt; std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt; &gt;</type>
        <definition>future&lt;std::shared_ptr&lt;async_io_handle&gt; &gt; boost::afio::when_any</definition>
        <argsstring>(std::nothrow_t _, std::vector&lt; async_io_op &gt; ops)</argsstring>
        <name>when_any</name>
        <param>
          <type>std::nothrow_t</type>
          <declname>_</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref> &gt;</type>
          <declname>ops</declname>
        </param>
        <briefdescription>
<para>Returns a result when any the supplied ops complete. Does not propagate exception states. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A future vector of shared_ptr&apos;s to <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of std::nothrow_t. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of the async_io_ops to wait upon.</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk.distinguish> vector batch of ops not exception propagating</qbk.distinguish>   <qbk>[heading Complexity]O(N).</qbk>   <qbk>[heading Exception Model]Non propagating</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="1968" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="1967" bodyend="1972"/>
      </memberdef>
      <memberdef kind="function" id="group__when__all__ops_1gaaf00f394b0af6575df503d4527788c5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1afio_1_1detail_1_1enable__if__async__op" kindref="compound">detail::enable_if_async_op</ref>&lt; true, typename Iterator::value_type &gt;::type</type>
        <definition>detail::enable_if_async_op&lt;true, typename Iterator::value_type&gt;::type boost::afio::when_all</definition>
        <argsstring>(Iterator first, Iterator last)</argsstring>
        <name>when_all</name>
        <param>
          <type>Iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Returns a result when all the supplied ops complete. Propagates exception states. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A future vector of shared_ptr&apos;s to <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref>. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>class Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator pointing to the first <ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref> to wait upon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator pointing after the last <ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref> to wait upon.</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk.distinguish> iterator batch of ops exception propagating</qbk.distinguish>   <qbk>[heading Complexity]O(N).</qbk>   <qbk>[heading Exception Model]Propagating</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="1985" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="1984" bodyend="1989"/>
      </memberdef>
      <memberdef kind="function" id="group__when__all__ops_1ga1a452f7d0c7a0517e824cddb0816e872" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1afio_1_1detail_1_1enable__if__async__op" kindref="compound">detail::enable_if_async_op</ref>&lt; false, typename Iterator::value_type &gt;::type</type>
        <definition>detail::enable_if_async_op&lt;false, typename Iterator::value_type&gt;::type boost::afio::when_any</definition>
        <argsstring>(Iterator first, Iterator last)</argsstring>
        <name>when_any</name>
        <param>
          <type>Iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Returns a result when any the supplied ops complete. Propagates exception states. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A future vector of shared_ptr&apos;s to <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref>. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>class Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator pointing to the first <ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref> to wait upon. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>An iterator pointing after the last <ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref> to wait upon.</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk.distinguish> iterator batch of ops exception propagating</qbk.distinguish>   <qbk>[heading Complexity]O(N).</qbk>   <qbk>[heading Exception Model]Propagating</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="2002" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="2001" bodyend="2006"/>
      </memberdef>
      <memberdef kind="function" id="group__when__all__ops_1ga6591b9bbaf576183995ba8612f1c86d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>future&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt; &gt; &gt;</type>
        <definition>future&lt;std::vector&lt;std::shared_ptr&lt;async_io_handle&gt; &gt; &gt; boost::afio::when_all</definition>
        <argsstring>(std::vector&lt; async_io_op &gt; ops)</argsstring>
        <name>when_all</name>
        <param>
          <type>std::vector&lt; <ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref> &gt;</type>
          <declname>ops</declname>
        </param>
        <briefdescription>
<para>Returns a result when all the supplied ops complete. Propagates exception states. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A future vector of shared_ptr&apos;s to <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of the async_io_ops to wait upon.</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk.distinguish> vector batch of ops exception propagating</qbk.distinguish>   <qbk>[heading Complexity]O(N).</qbk>   <qbk>[heading Exception Model]Propagating</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="2017" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="2016" bodyend="2021"/>
      </memberdef>
      <memberdef kind="function" id="group__when__all__ops_1ga4a98962e8807e8f5fa31bb14fa430374" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>future&lt; std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt; &gt;</type>
        <definition>future&lt;std::shared_ptr&lt;async_io_handle&gt; &gt; boost::afio::when_any</definition>
        <argsstring>(std::vector&lt; async_io_op &gt; ops)</argsstring>
        <name>when_any</name>
        <param>
          <type>std::vector&lt; <ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref> &gt;</type>
          <declname>ops</declname>
        </param>
        <briefdescription>
<para>Returns a result when any the supplied ops complete. Propagates exception states. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A future vector of shared_ptr&apos;s to <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of the async_io_ops to wait upon.</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk.distinguish> vector batch of ops exception propagating</qbk.distinguish>   <qbk>[heading Complexity]O(N).</qbk>   <qbk>[heading Exception Model]Propagating</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="2032" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="2031" bodyend="2036"/>
      </memberdef>
      <memberdef kind="function" id="group__when__all__ops_1ga175bb31dd07b8c716c85f5bfdc17c9df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>future&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt; &gt; &gt;</type>
        <definition>future&lt;std::vector&lt;std::shared_ptr&lt;async_io_handle&gt; &gt; &gt; boost::afio::when_all</definition>
        <argsstring>(std::nothrow_t _, async_io_op op)</argsstring>
        <name>when_all</name>
        <param>
          <type>std::nothrow_t</type>
          <declname>_</declname>
        </param>
        <param>
          <type><ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Returns a result when the supplied op completes. Does not propagate exception states. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A future vector of shared_ptr&apos;s to <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of std::nothrow_t. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref> to wait upon.</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk.distinguish> convenience single op not exception propagating</qbk.distinguish>   <qbk>[heading Complexity]O(1).</qbk>   <qbk>[heading Exception Model]Non propagating</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="2048" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="2047" bodyend="2051"/>
      </memberdef>
      <memberdef kind="function" id="group__when__all__ops_1ga3a4b5bc5ed128e7ef337fe164f897782" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>future&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref> &gt; &gt; &gt;</type>
        <definition>future&lt;std::vector&lt;std::shared_ptr&lt;async_io_handle&gt; &gt; &gt; boost::afio::when_all</definition>
        <argsstring>(async_io_op op)</argsstring>
        <name>when_all</name>
        <param>
          <type><ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Returns a result when the supplied op completes. Propagates exception states. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A future vector of shared_ptr&apos;s to <ref refid="classboost_1_1afio_1_1async__io__handle" kindref="compound">async_io_handle</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref> to wait upon.</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk.distinguish> convenience single op exception propagating</qbk.distinguish>   <qbk>[heading Complexity]O(1).</qbk>   <qbk>[heading Exception Model]Non propagating</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="2062" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="2061" bodyend="2065"/>
      </memberdef>
      <memberdef kind="function" id="group__make__async__data__op__req_1ga9f62915b030e2f2ed5115b034e9721a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1afio_1_1async__data__op__req" kindref="compound">async_data_op_req</ref>&lt; typename std::remove_pointer&lt; typename std::decay&lt; T &gt;::type &gt;::type &gt;</type>
        <definition>async_data_op_req&lt;typename std::remove_pointer&lt;typename std::decay&lt;T&gt;::type&gt;::type&gt; boost::afio::make_async_data_op_req</definition>
        <argsstring>(async_io_op _precondition, T &amp;&amp;v, off_t _where)</argsstring>
        <name>make_async_data_op_req</name>
        <param>
          <type><ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref></type>
          <declname>_precondition</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_where</declname>
        </param>
        <briefdescription>
<para>Convenience instantiator of a <ref refid="structboost_1_1afio_1_1async__data__op__req" kindref="compound">async_data_op_req</ref>, letting the compiler deduce the template specialisation to use. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <ref refid="structboost_1_1afio_1_1async__data__op__req" kindref="compound">async_data_op_req</ref> matching the supplied parameter type. Constructs an instance. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_precondition</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional precondition for this operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to memory or reference to object into which to read or write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_where</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset at which to transfer</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk.distinguish> length deducing</qbk.distinguish>   <qbk>
[heading Example]
[readwrite_example]
</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="2699" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="2698" bodyend="2702"/>
      </memberdef>
      <memberdef kind="function" id="group__make__async__data__op__req_1gaaefe9a4cc37c21ba775399a66749b10b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structboost_1_1afio_1_1async__data__op__req" kindref="compound">async_data_op_req</ref>&lt; typename std::remove_pointer&lt; typename std::decay&lt; T &gt;::type &gt;::type &gt;</type>
        <definition>async_data_op_req&lt;typename std::remove_pointer&lt;typename std::decay&lt;T&gt;::type&gt;::type&gt; boost::afio::make_async_data_op_req</definition>
        <argsstring>(async_io_op _precondition, T &amp;&amp;v, size_t _length, off_t _where)</argsstring>
        <name>make_async_data_op_req</name>
        <param>
          <type><ref refid="structboost_1_1afio_1_1async__io__op" kindref="compound">async_io_op</ref></type>
          <declname>_precondition</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_length</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>_where</declname>
        </param>
        <briefdescription>
<para>Convenience instantiator of a <ref refid="structboost_1_1afio_1_1async__data__op__req" kindref="compound">async_data_op_req</ref>, letting the compiler deduce the template specialisation to use. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <ref refid="structboost_1_1afio_1_1async__data__op__req" kindref="compound">async_data_op_req</ref> matching the supplied parameter type. Constructs an instance. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_precondition</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional precondition for this operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to memory or reference to object into which to read or write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_where</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset at which to transfer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to transfer</para></parameterdescription>
</parameteritem>
</parameterlist>
 <qbk.distinguish> length specifying</qbk.distinguish>   <qbk>
[heading Example]
[readwrite_example]
</qbk>  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="2716" bodyfile="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" bodystart="2715" bodyend="2719"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/jenkins-slave/workspace/Boost.AFIO Build Documentation/boost-local/libs/afio/include/boost/afio/afio.hpp" line="102"/>
  </compounddef>
</doxygen>
