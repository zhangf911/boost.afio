[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/classboost_1_1afio_1_1async__io__handle.xml]
[section:async_io_handle async_io_handle]

'''<indexterm><primary>async_io_handle</primary></indexterm>'''
The abstract base class encapsulating a platform-specific file handle. 

[heading Synopsis]
``class async_io_handle
{
  // ...
};
``

[heading Constructor(s)]
[table
[[Function] [Description] [Parameters] ]
[[``~async_io_handle()``

] [] [


]]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``async_file_io_dispatcher_base * parent()``

] [Returns the parent of this io handle. ] [


]]
[[``std::shared_ptr< async_io_handle > container()``

] [Returns a handle to the directory containing this handle. Only works if `file_flagsFastDirectoryEnumeration` was specified when this handle was opened. ] [


]]
[[``void * native_handle()``

] [Returns the native handle of this io handle. On POSIX, you can cast this to a fd using `(int)(size_t) native_handle()`. On Windows it's a simple `(HANDLE) native_handle()`. ] [


]]
[[``const chrono::system_clock::time_point & opened()``

] [Returns when this handle was opened. ] [


]]
[[``const std::filesystem::path & path()``

] [Returns the path of this io handle. ] [


]]
[[``file_flags flags()``

] [Returns the final flags used when this handle was opened. ] [


]]
[[``bool opened_as_file()``

] [True if this handle was opened as a file. ] [


]]
[[``bool opened_as_dir()``

] [True if this handle was opened as a directory. ] [


]]
[[``bool opened_as_symlink()``

] [True if this handle was opened as a symlink. ] [


]]
[[``off_t read_count()``

] [Returns how many bytes have been read since this handle was opened. ] [


]]
[[``off_t write_count()``

] [Returns how many bytes have been written since this handle was opened. ] [


]]
[[``off_t write_count_since_fsync()``

] [Returns how many bytes have been written since this handle was last fsynced. ] [


]]
[[``directory_entry direntry(metadata_flags wanted = directory_entry::metadata_fastpath())``

] [Returns a mostly filled directory_entry for the file or directory referenced by this handle. Use `metadata_flagsAll` if you want it as complete as your platform allows, even at the cost of severe performance loss. ] [[* metadata_flags]: ['wanted]:  




]]
[[``stat_t lstat(metadata_flags wanted = directory_entry::metadata_fastpath())``

] [Returns a mostly filled stat_t structure for the file or directory referenced by this handle. Use `metadata_flagsAll` if you want it as complete as your platform allows, even at the cost of severe performance loss. ] [[* metadata_flags]: ['wanted]:  




]]
[[``std::filesystem::path target()``

] [Returns the target path of this handle if it is a symbolic link. ] [


]]
[[``void * try_mapfile()``

] [Tries to map the file into memory. Currently only works if handle is read-only. ] [


]]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

[endsect]

