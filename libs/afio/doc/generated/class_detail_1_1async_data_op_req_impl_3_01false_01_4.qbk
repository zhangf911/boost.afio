[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/classboost_1_1afio_1_1detail_1_1async__data__op__req__impl_3_01false_01_4.xml]
[section:detail_async_data_op_req_impl< false > detail::async_data_op_req_impl< false >]

'''<indexterm><primary>detail</primary></indexterm><indexterm><primary>async_data_op_req_impl< false ></primary></indexterm>'''


[heading Synopsis]
``class detail::async_data_op_req_impl< false >
{
  async_io_op precondition;                     // An optional precondition for this operation. 
  std::vector< asio::mutable_buffer > buffers;  // A sequence of mutable Boost.ASIO buffers to read into. 
  off_t where;                                  // The offset from which to read. 
};
``

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[`` async_data_op_req_impl()``

] [Default constructor. ] [


]]
[[`` async_data_op_req_impl(const async_data_op_req_impl & o)``

] [Copy constructor. ] [[* const async_data_op_req_impl &]: ['o]:  




]]
[[`` async_data_op_req_impl(async_data_op_req_impl && o)``

] [Move constructor. ] [[* async_data_op_req_impl &&]: ['o]:  




]]
[[``async_data_op_req_impl & operator=(const async_data_op_req_impl & o)``

] [Copy assignment. ] [[* const async_data_op_req_impl &]: ['o]:  




]]
[[``async_data_op_req_impl & operator=(async_data_op_req_impl && o)``

] [Move assignment. ] [[* async_data_op_req_impl &&]: ['o]:  




]]
[[`` async_data_op_req_impl(async_io_op _precondition, void * v, size_t _length, off_t _where)``

] [Constructs an instance. ] [[* async_io_op]: ['_precondition]:  An optional precondition for this operation 

[* void *]: ['v]:  A pointer to memory or reference to object into which to read or write 

[* size_t]: ['_length]:  The number of bytes to transfer 

[* off_t]: ['_where]:  The offset at which to transfer 




]]
[[`` async_data_op_req_impl(async_io_op _precondition, std::vector< asio::mutable_buffer > _buffers, off_t _where)``

] [Constructs an instance. ] [[* async_io_op]: ['_precondition]:  An optional precondition for this operation 

[* std::vector< asio::mutable_buffer >]: ['_buffers]:  A sequence of mutable/const Boost.ASIO buffers to read into/write from 

[* off_t]: ['_where]:  The offset at which to transfer 




]]
[[``template<size_t N>
 async_data_op_req_impl(async_io_op _precondition, std::array< asio::mutable_buffer, N > _buffers, off_t _where)``

] [Constructs an instance. ] [[* async_io_op]: ['_precondition]:  An optional precondition for this operation 

[* std::array< asio::mutable_buffer, N >]: ['_buffers]:  A sequence of mutable/const Boost.ASIO buffers to read into/write from 

[* off_t]: ['_where]:  The offset at which to transfer 




]]
[[`` async_data_op_req_impl(async_io_op _precondition, asio::mutable_buffer _buffer, off_t _where)``

] [Constructs an instance. ] [[* async_io_op]: ['_precondition]:  An optional precondition for this operation 

[* asio::mutable_buffer]: ['_buffer]:  A mutable/const Boost.ASIO buffer to read into/write from 

[* off_t]: ['_where]:  The offset at which to transfer 




]]
[[``bool validate()``

] [Validates contents for correctness. ] [

][
True if contents are correct 


]]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

[endsect]

