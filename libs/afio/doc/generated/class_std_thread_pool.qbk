[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/classboost_1_1afio_1_1std__thread__pool.xml]
[section:std_thread_pool std_thread_pool]

'''<indexterm><primary>std_thread_pool</primary></indexterm>'''
A very simple thread pool based on std::thread or boost::thread. 

[heading Description]
This instantiates a [^`asio::io_service`] and a latchable [^`asio::io_service::work`] to keep any threads working until the instance is destructed. 

[heading Synopsis]
``class std_thread_pool
      : public thread_source
{
  // ...
};
``

[heading Constructor(s)]
[table
[[Function] [Description] [Parameters] ]
[[``std_thread_pool(size_t no)``

] [Constructs a thread pool of ['no] workers. ] [[* size_t]: ['no]:  The number of worker threads to create 




]]
[[``~std_thread_pool()``

] [] [


]]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``asio::io_service & io_service()``

] [Returns the underlying io_service. ] [


]]
[[``template<class R>
void enqueue(enqueued_task< R > task)``

] [Sends a task to the thread pool for execution. ] [[* enqueued_task< R >]: ['task]:  




]]
[[``template<class F>
shared_future< typename std::result_of< F()>::type > enqueue(F f)``

] [Sends some callable entity to the thread pool for execution. ] [[* F]: ['f]:  Any instance of a callable type 



][
An enqueued task for the enqueued callable 


]]
[[``void add_workers(size_t no)``

] [Adds more workers to the thread pool. ] [[* size_t]: ['no]:  The number of worker threads to add 




]]
[[``void destroy()``

] [Destroys the thread pool, waiting for worker threads to exit beforehand. ] [


]]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

[endsect]

