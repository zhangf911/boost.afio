[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/classboost_1_1afio_1_1thread__source.xml]
[section:thread_source thread_source]

'''<indexterm><primary>thread_source</primary></indexterm>'''
Abstract base class for a source of thread workers. 

[heading Description]
Note that in Boost 1.54, and possibly later versions, `boost::asio::io\u005fservice` on Windows appears to dislike being destructed during static data deinit, hence why this inherits from `std::enable\u005fshared\u005ffrom\u005fthis<>` in order that it may be reference count deleted before static data deinit occurs. 

[heading Synopsis]
``class thread_source
{
  // ...
};
``

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``boost::asio::io_service & io_service()``

] [Returns the underlying io_service. ] [


]]
[[``template<class R>
void enqueue(enqueued_task< R > task)``

] [Sends a task to the thread pool for execution. ] [[* enqueued_task< R >]: ['task]:  




]]
[[``template<class F>
shared_future< typename std::result_of< F()>::type > enqueue(F f)``

] [Sends some callable entity to the thread pool for execution. ] [[* F]: ['f]:  Any instance of a callable type 



][
An enqueued task for the enqueued callable 


]]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

[endsect]

