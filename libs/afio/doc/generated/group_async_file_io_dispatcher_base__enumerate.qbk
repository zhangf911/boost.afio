[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/group__async__file__io__dispatcher__base____enumerate.xml]
[section:enumerate_1_batch enumerate (batch)]

'''<indexterm><primary>enumerate</primary></indexterm>'''
Schedule a batch of asynchronous directory enumerations after preceding operations. 

[heading Description]
By default dir() returns shared handles i.e. dir("foo") and dir("foo") will return the exact same handle, and therefore enumerating not all of the entries at once is a race condition. The solution is to either set maxitems to a value large enough to guarantee a directory will be enumerated in a single shot, or to open a separate directory handle using the file\u005fflags::UniqueDirectoryHandle flag.

Note that setting maxitems=1 will often cause a buffer space exhaustion, causing a second syscall with an enlarged buffer. This is because AFIO cannot know if the allocated buffer can hold all of the filename being retrieved, so it may have to retry. Put another way, setting maxitems=1 will give you the worst performance possible, whereas maxitems=2 will probably only return one item most of the time.

[heading Synopsis]
``virtual std::pair<std::vector<future<std::pair<std::vector<directory_entry>, bool> > >, std::vector<async_io_op> > async_file_io_dispatcher_base::enumerate(const std::vector< async_enumerate_op_req > & reqs)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_enumerate_op_req > &] [] [reqs] [A batch of enumeration requests.]]
]


[heading Returns]
A batch of future vectors of directory entries with boolean returning false if done. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool*M) to complete where M is the average number of entries in each directory.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][enumerate_example]


[endsect]

[section:enumerate_1_single enumerate (single)]

'''<indexterm><primary>enumerate</primary></indexterm>'''
Schedule an asynchronous directory enumeration after a preceding operation. 

[heading Description]
By default dir() returns shared handles i.e. dir("foo") and dir("foo") will return the exact same handle, and therefore enumerating not all of the entries at once is a race condition. The solution is to either set maxitems to a value large enough to guarantee a directory will be enumerated in a single shot, or to open a separate directory handle using the file\u005fflags::UniqueDirectoryHandle flag.

Note that setting maxitems=1 will often cause a buffer space exhaustion, causing a second syscall with an enlarged buffer. This is because AFIO cannot know if the allocated buffer can hold all of the filename being retrieved, so it may have to retry. Put another way, setting maxitems=1 will give you the worst performance possible, whereas maxitems=2 will probably only return one item most of the time.

[heading Synopsis]
``std::pair< future< std::pair< std::vector< directory_entry >, bool > >, async_io_op > async_file_io_dispatcher_base::enumerate(const async_enumerate_op_req & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_enumerate_op_req &] [] [req] [An enumeration request.]]
]


[heading Returns]
A future vector of directory entries with a boolean returning false if done. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(M) to complete where M is the average number of entries in each directory.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][enumerate_example]


[endsect]

