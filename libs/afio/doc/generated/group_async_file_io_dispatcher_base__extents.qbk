[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/group__async__file__io__dispatcher__base____extents.xml]
[section:zero_2_batch zero (batch)]

'''<indexterm><primary>zero</primary></indexterm>'''
Schedule a batch of asynchronous zeroing and deallocations of physical storage ("hole punching") after preceding operations. 

[heading Description]
Most extent based filing systems provide an optimised way of zeroing parts of a file by deallocating the storage backing those regions, and marking those regions as unwritten instead of actually writing zero bytes to storage. They appear as zeroes to anything reading those ranges, and have the big advantage of not consuming any actual physical storage. On Windows, extent deallocation writes zeros for ordinary files and only actually deallocates physical storage if the file is sparse or compressed (note that AFIO by default creates sparse files where possible, and converts any file opened for writing to a sparse file). For your information, deallocation on NTFS is on a 64Kb granularity, but the zeros are written at a byte granularity. On Linux, an attempt is made to use FALLOC\u005fFL\u005fPUNCH\u005fHOLE which if it fails then a write of zeros corresponding to the same ranges is made instead. On FreeBSD, an attempt is made to use DIOCGDELETE which if it fails then a write of zeros corresponding to the same ranges is made instead. On OS X, there is no formal hole punching API that we are aware of, and so zeros are simply written.

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::zero(const std::vector< async_io_op > & ops, const std::vector< std::vector< std::pair< off_t, off_t >>> & ranges)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_io_op > &] [] [ops] [A batch of op handles. ]]
[[const std::vector< std::vector< std::pair< off_t, off_t >>> &] [] [ranges] [A batch of vectors of extents to zero and deallocate.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if deallocation is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][extents_example]


[endsect]

[section:zero_2_single zero (single)]

'''<indexterm><primary>zero</primary></indexterm>'''
Schedule an asynchronous zero and deallocation of physical storage ("hole punching") after a preceding operation. 

[heading Description]
Most extent based filing systems provide an optimised way of zeroing parts of a file by deallocating the storage backing those regions, and marking those regions as unwritten instead of actually writing zero bytes to storage. They appear as zeroes to anything reading those ranges, and have the big advantage of not consuming any actual physical storage. On Windows, extent deallocation writes zeros for ordinary files and only actually deallocates physical storage if the file is sparse or compressed (note that AFIO by default creates sparse files where possible, and converts any file opened for writing to a sparse file). For your information, deallocation on NTFS is on a 64Kb granularity, but the zeros are written at a byte granularity. On Linux, an attempt is made to use FALLOC\u005fFL\u005fPUNCH\u005fHOLE which if it fails then a write of zeros corresponding to the same ranges is made instead. On FreeBSD, an attempt is made to use DIOCGDELETE which if it fails then a write of zeros corresponding to the same ranges is made instead. On OS X, there is no formal hole punching API that we are aware of, and so zeros are simply written.

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::zero(const async_io_op & req, const std::vector< std::pair< off_t, off_t >> & ranges)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_io_op &] [] [req] [An op handle. ]]
[[const std::vector< std::pair< off_t, off_t >> &] [] [ranges] [A vector of extents to zero and deallocate.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if deallocation is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][extents_example]


[endsect]

[section:extents_1_batch extents (batch)]

'''<indexterm><primary>extents</primary></indexterm>'''
Schedule a batch of asynchronous extent enumerations after preceding operations. 

[heading Description]
In a sparsely allocated file, it can be useful to know which extents contain non-zero data. Note that this call is racy when other threads or processes are concurrently calling zero() or write() - this is a host OS API limitation.

[heading Synopsis]
``virtual std::pair<std::vector<future<std::vector<std::pair<off_t, off_t> > > >, std::vector<async_io_op> > async_file_io_dispatcher_base::extents(const std::vector< async_io_op > & ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_io_op > &] [] [ops] [A batch of op handles.]]
]


[heading Returns]
A batch of future vectors of extents. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool*M) to complete where M is the average number of extents in each file.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][extents_example]


[endsect]

[section:extents_1_single extents (single)]

'''<indexterm><primary>extents</primary></indexterm>'''
Schedule an asynchronous extent enumeration after a preceding operation. 

[heading Description]
In a sparsely allocated file, it can be useful to know which extents contain non-zero data. Note that this call is racy when other threads or processes are concurrently calling zero() or write() - this is a host OS API limitation.

[heading Synopsis]
``std::pair< future< std::vector< std::pair< off_t, off_t > > >, async_io_op > async_file_io_dispatcher_base::extents(const async_io_op & op)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_io_op &] [] [op] [An op handle.]]
]


[heading Returns]
A future vector of extents. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(M) to complete where M is the average number of extents in each file.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][extents_example]


[endsect]

