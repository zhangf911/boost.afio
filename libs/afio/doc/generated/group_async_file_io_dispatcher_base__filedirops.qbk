[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/group__async__file__io__dispatcher__base____filedirops.xml]
[section:adopt_1_batch adopt (batch)]

'''<indexterm><primary>adopt</primary></indexterm>'''
Schedule a batch of third party handle adoptions. 

[heading Description]
This function enables you to adopt third party custom async\u005fio\u005fhandle derivatives as ops into the scheduler. Think of it as if you were calling file(), except the op returns the supplied handle and otherwise does nothing.

[heading Synopsis]
``std::vector<async_io_op> async_file_io_dispatcher_base::adopt(const std::vector< std::shared_ptr< async_io_handle >> & hs)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< std::shared_ptr< async_io_handle >> &] [] [hs] [A batch of handles to adopt.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][adopt_example]


[endsect]

[section:adopt_1_single adopt (single)]

'''<indexterm><primary>adopt</primary></indexterm>'''
Schedule an adoption of a third party handle. 

[heading Description]
This function enables you to adopt third party custom async\u005fio\u005fhandle derivatives as ops into the scheduler. Think of it as if you were calling file(), except the op returns the supplied handle and otherwise does nothing.

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::adopt(std::shared_ptr< async_io_handle > h)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[std::shared_ptr< async_io_handle >] [] [h] [A handle to adopt.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if directory creation is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][adopt_example]


[endsect]

[section:dir_1_batch dir (batch)]

'''<indexterm><primary>dir</primary></indexterm>'''
Schedule a batch of asynchronous directory creations and opens after optional preconditions. 

[heading Description]
Note that if there is already a handle open to the directory requested, that will be returned instead of a new handle unless file\u005fflags::UniqueDirectoryHandle is specified.

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::dir(const std::vector< async_path_op_req > & reqs)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_path_op_req > &] [] [reqs] [A batch of [^`async_path_op_req`] structures.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if directory creation is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filedir_example]


[endsect]

[section:dir_1_single dir (single)]

'''<indexterm><primary>dir</primary></indexterm>'''
Schedule an asynchronous directory creation and open after an optional precondition. 

[heading Description]
Note that if there is already a handle open to the directory requested, that will be returned instead of a new handle unless file\u005fflags::UniqueDirectoryHandle is specified.

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::dir(const async_path_op_req & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_path_op_req &] [] [req] [An [^`async_path_op_req`] structure.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if directory creation is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filedir_example]


[endsect]

[section:rmdir_1_batch rmdir (batch)]

'''<indexterm><primary>rmdir</primary></indexterm>'''
Schedule a batch of asynchronous directory deletions after optional preconditions. 

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::rmdir(const std::vector< async_path_op_req > & reqs)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_path_op_req > &] [] [reqs] [A batch of [^`async_path_op_req`] structures.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if directory deletion is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filedir_example]


[endsect]

[section:rmdir_1_single rmdir (single)]

'''<indexterm><primary>rmdir</primary></indexterm>'''
Schedule an asynchronous directory deletion after an optional precondition. 

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::rmdir(const async_path_op_req & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_path_op_req &] [] [req] [An [^`async_path_op_req`] structure.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if directory deletion is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filedir_example]


[endsect]

[section:file_1_batch file (batch)]

'''<indexterm><primary>file</primary></indexterm>'''
Schedule a batch of asynchronous file creations and opens after optional preconditions. 

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::file(const std::vector< async_path_op_req > & reqs)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_path_op_req > &] [] [reqs] [A batch of [^`async_path_op_req`] structures.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if file creation is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filedir_example]


[endsect]

[section:file_1_single file (single)]

'''<indexterm><primary>file</primary></indexterm>'''
Schedule an asynchronous file creation and open after an optional precondition. 

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::file(const async_path_op_req & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_path_op_req &] [] [req] [An [^`async_path_op_req`] structure.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if file creation is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filedir_example]


[endsect]

[section:rmfile_1_batch rmfile (batch)]

'''<indexterm><primary>rmfile</primary></indexterm>'''
Schedule a batch of asynchronous file deletions after optional preconditions. 

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::rmfile(const std::vector< async_path_op_req > & reqs)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_path_op_req > &] [] [reqs] [A batch of [^`async_path_op_req`] structures.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if file deletion is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filedir_example]


[endsect]

[section:rmfile_1_single rmfile (single)]

'''<indexterm><primary>rmfile</primary></indexterm>'''
Schedule an asynchronous file deletion after an optional precondition. 

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::rmfile(const async_path_op_req & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_path_op_req &] [] [req] [An [^`async_path_op_req`] structure.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if file deletion is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filedir_example]


[endsect]

[section:symlink_1_batch symlink (batch)]

'''<indexterm><primary>symlink</primary></indexterm>'''
Schedule a batch of asynchronous symlink creations and opens after a precondition. 

[heading Description]
Note that if creating, the target for the symlink is the precondition. On Windows directories are symlinked using a reparse point instead of a symlink due to the default lack of the [^`SeCreateSymbolicLinkPrivilege`] for non-Administrative users.

Note that currently on Windows non-directory symbolic links are not supported. If there is demand for this we may add support.

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::symlink(const std::vector< async_path_op_req > & reqs)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_path_op_req > &] [] [reqs] [A batch of [^`async_path_op_req`] structures.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if symlink creation is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filedir_example]


[endsect]

[section:symlink_1_single symlink (single)]

'''<indexterm><primary>symlink</primary></indexterm>'''
Schedule an asynchronous symlink creation and open after a precondition. 

[heading Description]
Note that if creating, the target for the symlink is the precondition. On Windows directories are symlinked using a reparse point instead of a symlink due to the default lack of the [^`SeCreateSymbolicLinkPrivilege`] for non-Administrative users.

Note that currently on Windows non-directory symbolic links are not supported. If there is demand for this we may add support.

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::symlink(const async_path_op_req & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_path_op_req &] [] [req] [An [^`async_path_op_req`] structure.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if symlink creation is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filedir_example]


[endsect]

[section:rmsymlink_1_batch rmsymlink (batch)]

'''<indexterm><primary>rmsymlink</primary></indexterm>'''
Schedule a batch of asynchronous symlink deletions after optional preconditions. 

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::rmsymlink(const std::vector< async_path_op_req > & reqs)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_path_op_req > &] [] [reqs] [A batch of [^`async_path_op_req`] structures.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if symlink deletion is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filedir_example]


[endsect]

[section:rmsymlink_1_single rmsymlink (single)]

'''<indexterm><primary>rmsymlink</primary></indexterm>'''
Schedule an asynchronous symlink deletion after an optional precondition. 

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::rmsymlink(const async_path_op_req & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_path_op_req &] [] [req] [An [^`async_path_op_req`] structure.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if symlink deletion is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filedir_example]


[endsect]

[section:sync_1_batch sync (batch)]

'''<indexterm><primary>sync</primary></indexterm>'''
Schedule a batch of asynchronous content synchronisations with physical storage after preceding operations. 

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::sync(const std::vector< async_io_op > & ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_io_op > &] [] [ops] [A batch of op handles.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if content synchronisation is constant time (which is extremely unlikely).
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][readwrite_example]


[endsect]

[section:sync_1_single sync (single)]

'''<indexterm><primary>sync</primary></indexterm>'''
Schedule an asynchronous content synchronisation with physical storage after a preceding operation. 

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::sync(const async_io_op & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_io_op &] [] [req] [An op handle.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if content synchronisation is constant time (which is extremely unlikely).
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][readwrite_example]


[endsect]

[section:close_1_batch close (batch)]

'''<indexterm><primary>close</primary></indexterm>'''
Schedule a batch of asynchronous file or directory handle closes after preceding operations. 

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::close(const std::vector< async_io_op > & ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_io_op > &] [] [ops] [A batch of op handles.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if closing handles is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filedir_example]


[endsect]

[section:close_1_single close (single)]

'''<indexterm><primary>close</primary></indexterm>'''
Schedule an asynchronous file or directory handle close after a preceding operation. 

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::close(const async_io_op & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_io_op &] [] [req] [An op handle.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if closing handles is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filedir_example]


[endsect]

[section:read_1_batch read (batch)]

'''<indexterm><primary>read</primary></indexterm>'''
Schedule a batch of asynchronous data reads after preceding operations, where offset and total data read must not exceed the present file size. 

[heading Description]
Note that on Windows this call issues a separate async file operation for each buffer supplied, thus making scatter/gather i/o no more efficient than making separate calls. The big exception to this is when doing unbuffered page aligned i/o for which Windows provides special scatter/gather i/o functions. 

[heading Synopsis]
``template<class T>
virtual std::vector<async_io_op> async_file_io_dispatcher_base::read(const std::vector< async_data_op_req< T >> & ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[class T] [Any type. ] [ - ] [Must be specified]]
[[const std::vector< async_data_op_req< T >> &] [] [ops] [A batch of async_data_op_req<T> structures.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if reading data is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][readwrite_example]


[endsect]

[section:read_1_single read (single)]

'''<indexterm><primary>read</primary></indexterm>'''
Schedule an asynchronous data read after a preceding operation, where offset and total data read must not exceed the present file size. 

[heading Description]
Note that on Windows this call issues a separate async file operation for each buffer supplied, thus making scatter/gather i/o no more efficient than making separate calls. The big exception to this is when doing unbuffered page aligned i/o for which Windows provides special scatter/gather i/o functions. 

[heading Synopsis]
``template<class T>
async_io_op async_file_io_dispatcher_base::read(const async_data_op_req< T > & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[class T] [Any type. ] [ - ] [Must be specified]]
[[const async_data_op_req< T > &] [] [req] [An async_data_op_req<T> structure.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if reading data is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][readwrite_example]


[endsect]

[section:write_1_batch write (batch)]

'''<indexterm><primary>write</primary></indexterm>'''
Schedule a batch of asynchronous data writes after preceding operations, where offset and total data written must not exceed the present file size. 

[heading Description]
Note that on Windows this call issues a separate async file operation for each buffer supplied, thus making scatter/gather i/o no more efficient than making separate calls. The big exception to this is when doing unbuffered page aligned i/o for which Windows provides special scatter/gather i/o functions. 

[heading Synopsis]
``template<class T>
virtual std::vector<async_io_op> async_file_io_dispatcher_base::write(const std::vector< async_data_op_req< const T >> & ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[class T] [Any type. ] [ - ] [Must be specified]]
[[const std::vector< async_data_op_req< const T >> &] [] [ops] [A batch of async_data_op_req<const T> structures.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if writing data is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][readwrite_example]


[endsect]

[section:write_1_single write (single)]

'''<indexterm><primary>write</primary></indexterm>'''
Schedule an asynchronous data write after a preceding operation, where offset and total data written must not exceed the present file size. 

[heading Description]
Note that on Windows this call issues a separate async file operation for each buffer supplied, thus making scatter/gather i/o no more efficient than making separate calls. The big exception to this is when doing unbuffered page aligned i/o for which Windows provides special scatter/gather i/o functions. 

[heading Synopsis]
``template<class T>
async_io_op async_file_io_dispatcher_base::write(const async_data_op_req< const T > & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[class T] [Any type. ] [ - ] [Must be specified]]
[[const async_data_op_req< const T > &] [] [req] [An async_data_op_req<const T> structure.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if writing data is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][readwrite_example]


[endsect]

[section:truncate_2_batch truncate (batch)]

'''<indexterm><primary>truncate</primary></indexterm>'''
Schedule a batch of asynchronous file length truncations after preceding operations. 

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::truncate(const std::vector< async_io_op > & ops, const std::vector< off_t > & sizes)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_io_op > &] [] [ops] [A batch of op handles. ]]
[[const std::vector< off_t > &] [] [sizes] [A batch of new lengths.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if truncating file lengths is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][readwrite_example]


[endsect]

[section:truncate_2_single truncate (single)]

'''<indexterm><primary>truncate</primary></indexterm>'''
Schedule an asynchronous file length truncation after a preceding operation. 

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::truncate(const async_io_op & op, off_t newsize)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_io_op &] [] [op] [An op handle. ]]
[[off_t] [] [newsize] [The new size for the file.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if truncating file lengths is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][readwrite_example]


[endsect]

