[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/group__async__file__io__dispatcher__base____filter.xml]
[section:post_op_filter_clear post_op_filter_clear]

'''<indexterm><primary>post_op_filter_clear</primary></indexterm>'''
Clears the post op and readwrite filters. Not threadsafe. 

[heading Synopsis]
``void async_file_io_dispatcher_base::post_op_filter_clear()``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
]


[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]O(1).
[heading Example][filter_example]


[endsect]

[section:post_op_filter post_op_filter]

'''<indexterm><primary>post_op_filter</primary></indexterm>'''
Install op filters for non-buffer taking ops. Not threadsafe. 

[heading Description]
`std::function<async\u005ffile\u005fio\u005fdispatcher\u005fbase::filter\u005ft>` will be called after every op of type `detail::OpType` completes (`detail::OpType::Unknown` means call this filter for all ops) with the op type and op output.

Note that filters are currently implemented as a linear scan, so a full iteration of all filters is done for every op completed. The filter is called straight after an op's future is set and before any completions are issued. Any exceptions thrown by the filter are thrown away.

[heading Synopsis]
``void async_file_io_dispatcher_base::post_op_filter(std::vector< std::pair< detail::OpType, std::function< async_file_io_dispatcher_base::filter_t >>> filters)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[std::vector< std::pair< detail::OpType, std::function< async_file_io_dispatcher_base::filter_t >>>] [] [filters] [A batch of pairs of op type to be filtered and bound filter handler functions of type `filter_t`]]
]


[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]O(N) where N is the total number of filters currently configured.
[heading Example][filter_example]


[endsect]

[section:post_readwrite_filter post_readwrite_filter]

'''<indexterm><primary>post_readwrite_filter</primary></indexterm>'''
Install read/write op filters, useful for tight ASIO integration. Not threadsafe. 

[heading Description]
`std::function<async\u005ffile\u005fio\u005fdispatcher\u005fbase::filter\u005fbuffers\u005ft>` will be called after every op of type `detail::OpType` completes (`detail::OpType::Unknown` means call this filter for all ops) with the op type, file handle, op input, file offset, buffers offset, buffers amount, error state and bytes transferred. Any filter other than read() and write() will be ignored, for those use post\u005fop\u005ffilter().

Note that buffer filters are currently implemented as a linear scan, so a full iteration of all buffer filters is done for every read/write op completed. The filter is called straight after a read or write operation has completed, and BEFORE any checks that it transferred the data it was supposed to. Any exceptions thrown by the filter are reported as if the read/write operation threw them, and filter processing stops at the filter which threw.

[heading Synopsis]
``void async_file_io_dispatcher_base::post_readwrite_filter(std::vector< std::pair< detail::OpType, std::function< async_file_io_dispatcher_base::filter_readwrite_t >>> filters)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[std::vector< std::pair< detail::OpType, std::function< async_file_io_dispatcher_base::filter_readwrite_t >>>] [] [filters] [A batch of pairs of op type to be filtered and bound filter handler functions of type `filter_buffers_t`]]
]


[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]O(N) where N is the total number of filters currently configured.
[heading Example][filter_example]


[endsect]

