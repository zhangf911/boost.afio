[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/group__async__file__io__dispatcher__base____statfs.xml]
[section:statfs_2_batch statfs (batch)]

'''<indexterm><primary>statfs</primary></indexterm>'''
Schedule a batch of asynchronous volume enumerations after preceding operations. 

[heading Synopsis]
``virtual std::pair<std::vector<future<statfs_t> >, std::vector<async_io_op> > async_file_io_dispatcher_base::statfs(const std::vector< async_io_op > & ops, const std::vector< fs_metadata_flags > & reqs)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_io_op > &] [] [ops] [A batch of op handles. ]]
[[const std::vector< fs_metadata_flags > &] [] [reqs] [A batch of metadata requests.]]
]


[heading Returns]
A batch of future volume metadatas. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool*M) to complete where M is the average number of entries in each directory.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][statfs_example]


[endsect]

[section:statfs_2_single statfs (single)]

'''<indexterm><primary>statfs</primary></indexterm>'''
Schedule an asynchronous volume enumeration after a preceding operation. 

[heading Synopsis]
``std::pair< future< statfs_t >, async_io_op > async_file_io_dispatcher_base::statfs(const async_io_op & op, const fs_metadata_flags & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_io_op &] [] [op] [An op handle. ]]
[[const fs_metadata_flags &] [] [req] [A metadata request.]]
]


[heading Returns]
A future volume metadatas. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][statfs_example]


[endsect]

