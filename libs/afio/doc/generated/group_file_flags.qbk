[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/group__file__flags.xml]
[section:file_flags file_flags]

'''<indexterm><primary>file_flags</primary></indexterm>'''
'''<indexterm><primary>None</primary></indexterm>'''
'''<indexterm><primary>Read</primary></indexterm>'''
'''<indexterm><primary>Write</primary></indexterm>'''
'''<indexterm><primary>ReadWrite</primary></indexterm>'''
'''<indexterm><primary>Append</primary></indexterm>'''
'''<indexterm><primary>Truncate</primary></indexterm>'''
'''<indexterm><primary>Create</primary></indexterm>'''
'''<indexterm><primary>CreateOnlyIfNotExist</primary></indexterm>'''
'''<indexterm><primary>CreateCompressed</primary></indexterm>'''
'''<indexterm><primary>WillBeSequentiallyAccessed</primary></indexterm>'''
'''<indexterm><primary>WillBeRandomlyAccessed</primary></indexterm>'''
'''<indexterm><primary>NoSparse</primary></indexterm>'''
'''<indexterm><primary>FastDirectoryEnumeration</primary></indexterm>'''
'''<indexterm><primary>UniqueDirectoryHandle</primary></indexterm>'''
'''<indexterm><primary>OSDirect</primary></indexterm>'''
'''<indexterm><primary>OSMMap</primary></indexterm>'''
'''<indexterm><primary>AlwaysSync</primary></indexterm>'''
'''<indexterm><primary>SyncOnClose</primary></indexterm>'''
'''<indexterm><primary>EnforceDependencyWriteOrder</primary></indexterm>'''
'''<indexterm><primary>int_opening_link</primary></indexterm>'''
'''<indexterm><primary>int_opening_dir</primary></indexterm>'''
Bitwise file and directory open flags. 

[heading Synopsis]
``enum file_flags {None = 0, Read = 1, Write = 2, ReadWrite = 3, Append = 4, Truncate = 8, Create = 16, CreateOnlyIfNotExist = 32, CreateCompressed = 64, WillBeSequentiallyAccessed = 128, WillBeRandomlyAccessed = 256, NoSparse = 512, FastDirectoryEnumeration = (1<<10), UniqueDirectoryHandle = (1<<11), OSDirect = (1<<16), OSMMap = (1<<17), AlwaysSync = (1<<24), SyncOnClose = (1<<25), EnforceDependencyWriteOrder = (1<<26), int_opening_link = (1<<29), int_opening_dir = (1<<30)};``

[heading Values]

[table
[[Value] [Description] ]
[[None] [No flags set. ]]
[[Read] [Read access. ]]
[[Write] [Write access. ]]
[[ReadWrite] [Read and write access. ]]
[[Append] [Append only. ]]
[[Truncate] [Truncate existing file to zero. ]]
[[Create] [Open and create if doesn't exist. Always creates sparse files if possible. ]]
[[CreateOnlyIfNotExist] [Create and open only if doesn't exist. ]]
[[CreateCompressed] [Create a compressed file, needs to be combined with one of the other create flags. Only succeeds if supported by the underlying filing system. ]]
[[WillBeSequentiallyAccessed] [Will be exclusively either read or written sequentially. If you're exclusively writing sequentially, ['strongly] consider turning on OSDirect too. ]]
[[WillBeRandomlyAccessed] [Will be randomly accessed, so don't bother with read-ahead. If you're using this, ['strongly] consider turning on OSDirect too. ]]
[[NoSparse] [Don't create sparse files. May be ignored by some filing systems (e.g. ext4). ]]
[[FastDirectoryEnumeration] [Hold a file handle open to the containing directory of each open file for fast directory enumeration. ]]
[[UniqueDirectoryHandle] [Return a unique directory handle rather than a shared directory handle. ]]
[[OSDirect] [Bypass the OS file buffers (only really useful for writing large files, or a lot of random reads and writes. Note you must 4Kb align everything if this is on) ]]
[[OSMMap] [Memory map files (for reads only). ]]
[[AlwaysSync] [Ask the OS to not complete until the data is on the physical storage. Best used only with OSDirect, otherwise use SyncOnClose. ]]
[[SyncOnClose] [Automatically initiate an asynchronous flush just before file close, and fuse both operations so both must complete for close to complete. ]]
[[EnforceDependencyWriteOrder] [Ensure that data writes to files reach physical storage in the same order as the op dependencies close files. Does NOT enforce ordering of individual data writes, ONLY all file writes accumulated before a file close. ]]
[[int_opening_link] [Internal use only. Don't use. ]]
[[int_opening_dir] [Internal use only. Don't use. ]]
]


[heading Header]
`#include <boost/afio/afio.hpp>`


[endsect]

