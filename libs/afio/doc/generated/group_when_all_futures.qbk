[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/group__when__all__futures.xml]
[section:when_all when_all (iterator batch of ops exception propagating)]

'''<indexterm><primary>when_all</primary></indexterm>'''
Makes a future vector of results from all the supplied futures. 

[heading Description]
Returns a result when all the supplied ops complete. Propagates exception states.

This is an implementation of WG21 N3634's when\u005fall() which uses process\u005fthreadpool() to allow you to create a future which only becomes available when all the supplied futures become available.

[heading Synopsis]
``template<class Iterator>
detail::enable_if_async_op< true, typename Iterator::value_type >::type when_all(Iterator first, Iterator last)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[class Iterator] [An iterator type. ] [ - ] [Must be specified]]
[[Iterator] [] [first] [An iterator pointing to the first item to wait upon ]]
[[Iterator] [] [last] [An iterator pointing to after the last future to wait upon]]
]


[heading Returns]
A future vector of the results of the input futures A future vector of shared\u005fptr's to async\u005fio\u005fhandle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]O(N)
[heading Exception Model]The same as a future
[heading Complexity]O(N).
[heading Exception Model]Propagating


[endsect]

[section:when_any when_any (iterator batch of ops exception propagating)]

'''<indexterm><primary>when_any</primary></indexterm>'''
Returns a future tuple of results from all the supplied futures. 

[heading Description]
Returns a result when any the supplied ops complete. Propagates exception states.

Makes a future result from the first of the supplied futures to become available

This is an implementation of WG21 N3634's when\u005fany() which uses process\u005fthreadpool() to allow you to create a future which only becomes available when the first of the supplied futures become available.

[heading Synopsis]
``template<class Iterator>
detail::enable_if_async_op< false, typename Iterator::value_type >::type when_any(Iterator first, Iterator last)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[class Iterator] [An iterator type. ] [ - ] [Must be specified]]
[[Iterator] [] [first] [An iterator pointing to the first future to wait upon ]]
[[Iterator] [] [last] [An iterator pointing to after the last future to wait upon]]
]


[heading Returns]
A future pair of the first future to become available and its result A future vector of shared\u005fptr's to async\u005fio\u005fhandle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]The same as boost::wait_for_any()
[heading Exception Model]The same as a future
[heading Complexity]O(N).
[heading Exception Model]Propagating


[endsect]

