[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/structboost_1_1afio_1_1async__data__op__req_3_01const_01_t_01_4.xml]
[section:async_data_op_req_constt_ async_data_op_req< const T >]

'''<indexterm><primary>async_data_op_req&lt; const T &gt;</primary></indexterm>'''
A convenience bundle of precondition, data and where for writing from a single [^`const T *`]. Data [*MUST] stay around until the operation completes. 

[heading Synopsis]
``template<class T>
struct async_data_op_req< const T >
      : public detail::async_data_op_req_impl< true >
{
  async_io_op precondition;                   // A precondition containing an open file handle for this operation. 
  std::vector< asio::const_buffer > buffers;  // A sequence of const Boost.ASIO buffers to write from. 
  off_t where;                                // The offset at which to write. 
};
``

[heading Template parameter(s)]
[table
[[Parameter] [Description]]
[[class T] [Any readable type T ]]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``bool validate()``

] [Validates contents for correctness. ] [

][
True if contents are correct 


]]
[[`` async_data_op_req()``

] [Default constructor. ] [


]]
[[`` async_data_op_req(const async_data_op_req & o)``

] [Copy constructor. ] [[* const async_data_op_req &]: ['o]:  




]]
[[`` async_data_op_req(async_data_op_req && o)``

] [Move constructor. ] [[* async_data_op_req &&]: ['o]:  




]]
[[`` async_data_op_req(const async_data_op_req< T > & o)``

] [Copy constructor. ] [[* const async_data_op_req< T > &]: ['o]:  




]]
[[`` async_data_op_req(async_data_op_req< T > && o)``

] [Move constructor. ] [[* async_data_op_req< T > &&]: ['o]:  




]]
[[``async_data_op_req & operator=(const async_data_op_req & o)``

] [Copy assignment. ] [[* const async_data_op_req &]: ['o]:  




]]
[[``async_data_op_req & operator=(async_data_op_req && o)``

] [Move assignment. ] [[* async_data_op_req &&]: ['o]:  




]]
[[`` async_data_op_req(async_io_op _precondition, const T * v, size_t _length, off_t _where)``

] [Constructs an instance. ] [[* async_io_op]: ['_precondition]:  An optional precondition for this operation 

[* const T *]: ['v]:  A pointer to memory or reference to object into which to read or write 

[* size_t]: ['_length]:  The number of bytes to transfer 

[* off_t]: ['_where]:  The offset at which to transfer 




]]
[[``template<size_t N>
 async_data_op_req(async_io_op _precondition, const T(&) v, off_t _where)``

] [Constructs an instance. ] [[* async_io_op]: ['_precondition]:  An optional precondition for this operation 

[* const T(&)]: ['v]:  A pointer to memory or reference to object into which to read or write 

[* off_t]: ['_where]:  The offset at which to transfer 




]]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

[endsect]

