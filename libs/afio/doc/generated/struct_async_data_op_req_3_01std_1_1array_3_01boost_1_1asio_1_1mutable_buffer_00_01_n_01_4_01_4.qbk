[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/structboost_1_1afio_1_1async__data__op__req_3_01std_1_1array_3_01boost_1_1asio_1_1mutable__buffer_00_01_n_01_4_01_4.xml]
[section:async_data_op_req_std_array_boost_asio_mutable_buffer_n__ async_data_op_req< std::array< boost::asio::mutable_buffer, N > >]

'''<indexterm><primary>async_data_op_req&lt; std::array&lt; boost::asio::mutable_buffer, N &gt; &gt;</primary></indexterm>'''
A convenience bundle of precondition, data and where for reading into a `std::array<boost::asio::mutable_buffer, N>`. Data [*MUST] stay around until the operation completes. 

[heading Synopsis]
``template<size_t N>
struct async_data_op_req< std::array< boost::asio::mutable_buffer, N > >
      : public detail::async_data_op_req_impl< false >
{
  async_io_op precondition;                              // A precondition containing an open file handle for this operation. 
  std::array< boost::asio::mutable_buffer, N > buffers;  // A sequence of mutable Boost.ASIO buffers to read into. 
  off_t where;                                           // The offset from which to read. 
};
``

[heading Template parameter(s)]
[table
[[Parameter] [Description]]
[[size_t N] [The size of the array. ]]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``bool validate()``

] [Validates contents for correctness. ] [

][
True if contents are correct 


]]
[[`` async_data_op_req()``

] [Default constructor. ] [


]]
[[`` async_data_op_req(const async_data_op_req & o)``

] [Copy constructor. ] [[* const async_data_op_req &]: ['o]:  




]]
[[`` async_data_op_req(async_data_op_req && o)``

] [Move constructor. ] [[* async_data_op_req &&]: ['o]:  




]]
[[``async_data_op_req & operator=(const async_data_op_req & o)``

] [Copy assignment. ] [[* const async_data_op_req &]: ['o]:  




]]
[[``async_data_op_req & operator=(async_data_op_req && o)``

] [Move assignment. ] [[* async_data_op_req &&]: ['o]:  




]]
[[`` async_data_op_req(async_io_op _precondition, std::array< boost::asio::mutable_buffer, N > v, off_t _where)``

] [Constructs an instance. ] [[* async_io_op]: ['_precondition]:  An optional precondition for this operation 

[* std::array< boost::asio::mutable_buffer, N >]: ['v]:  A pointer to memory or reference to object into which to read or write 

[* off_t]: ['_where]:  The offset at which to transfer 




]]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

[endsect]

