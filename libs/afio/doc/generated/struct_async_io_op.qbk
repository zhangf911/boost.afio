[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/structboost_1_1afio_1_1async__io__op.xml]
[section:async_io_op async_io_op]

'''<indexterm><primary>async_io_op</primary></indexterm>'''
A reference to an asynchronous operation. 

[heading Description]
The id field is always valid (and non-zero) if this reference is valid. 

[heading Synopsis]
``struct async_io_op
{
  async_file_io_dispatcher_base * parent;                 // The parent dispatcher. 
  size_t id;                                              // A unique id for this operation. 
  shared_future< std::shared_ptr< async_io_handle > > h;  // A future handle to the item being operated upon. 
};
``

[heading Constructor(s)]
[table
[[Function] [Description] [Parameters] ]
[[``async_io_op()``

] [Default constructor. ] [


]]
[[``async_io_op(const async_io_op & o)``

] [Copy constructor. ] [[* const async_io_op &]: ['o]:  




]]
[[``async_io_op(async_io_op && o)``

] [Move constructor. ] [[* async_io_op &&]: ['o]:  




]]
[[``async_io_op(async_file_io_dispatcher_base * _parent, size_t _id, shared_future< std::shared_ptr< async_io_handle >> _handle, bool check_handle = true, bool validate = true)``

] [] [[* async_file_io_dispatcher_base *]: ['_parent]:  The dispatcher this op belongs to. 

[* size_t]: ['_id]:  The unique non-zero id of this op. 

[* shared_future< std::shared_ptr< async_io_handle >>]: ['_handle]:  A shared_ptr to shared state between all instances of this reference. 

[* bool]: ['check_handle]:  Whether to have validation additionally check if a handle is not null 

[* bool]: ['validate]:  Whether to check the inputs and shared state for valid (and not errored) values 




]]
[[``async_io_op(async_file_io_dispatcher_base * _parent, size_t _id)``

] [] [[* async_file_io_dispatcher_base *]: ['_parent]:  The dispatcher this op belongs to. 

[* size_t]: ['_id]:  The unique non-zero id of this op. 




]]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``async_io_op & operator=(const async_io_op & o)``

] [Copy assignment. ] [[* const async_io_op &]: ['o]:  




]]
[[``async_io_op & operator=(async_io_op && o)``

] [Move assignment. ] [[* async_io_op &&]: ['o]:  




]]
[[``std::shared_ptr< async_io_handle > get(bool return_null_if_errored = false)``

] [Retrieves the handle or exception from the shared state. Same as h.get(). ] [[* bool]: ['return_null_if_errored]:  




]]
[[``const async_io_handle & operator*()``

] [Dereferences the handle from the shared state. Same as *h.get(). ] [


]]
[[``async_io_handle & operator*()``

] [Dereferences the handle from the shared state. Same as *h.get(). ] [


]]
[[``const async_io_handle * operator->()``

] [Dereferences the handle from the shared state. Same as h.get()->get(). ] [


]]
[[``async_io_handle * operator->()``

] [Dereferences the handle from the shared state. Same as h.get()->get(). ] [


]]
[[``bool validate(bool check_handle = true)``

] [Validates contents. ] [[* bool]: ['check_handle]:  




]]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

[endsect]

